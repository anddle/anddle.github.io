<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>从设计到实现</title>
  <subtitle>手把手教你做android应用开发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://book.anddle.com/"/>
  <updated>2017-02-17T03:11:28.000Z</updated>
  <id>http://book.anddle.com/</id>
  
  <author>
    <name>安豆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>9 界面模式</title>
    <link href="http://book.anddle.com/2_%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/9_%E7%95%8C%E9%9D%A2%E6%A8%A1%E5%BC%8F/"/>
    <id>http://book.anddle.com/2_设计原理/9_界面模式/</id>
    <published>2017-01-12T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="界面模式"><a href="#界面模式" class="headerlink" title="界面模式"></a>界面模式</h1><p><code>Material Design</code>的基础组件我们已经大体了解过了，现在我们看看<code>Material Design</code>在结合这些不同组件的过程中，有哪些套路，也就是有哪些常用的界面设计模式。了解了这些模式，可以帮助设计者们做出合乎开发者实现的方案。</p>
<p>设计的套路有很多，<code>列表-list</code> <code>分页-tab</code> <code>网格-Grid</code> <code>侧边栏</code>  <code>下拉刷新</code>等等。这里只列出几个常见的，更多的方式请参考<a href="https://material.google.com/" target="_blank" rel="external">设计规范</a>，以及其他各种优秀应用的精巧设计。</p>
<p>手机端屏幕大小是有限制的，好的设计会充分利用有限的空间，合理的向用户展示出更多的内容。</p>
<h2 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h2><p>侧边栏的设计最早是由国外的第三方开发者设计出来的，在用户中很受欢迎。于是后来被很多开发者采用。从安卓5.0开始，Google就推出了官方的实现方式，并作为一个典型的界面设计方案推荐给了大家。</p>
<p>带侧边栏布局，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/slider_drawer_example.png" width="300" alt=" slider_drawer_example"></div>

<p>更加具体的规范请参考<a href="https://material.google.com/patterns/navigation-drawer.html" target="_blank" rel="external">这里</a>。</p>
<h2 id="底部导航栏"><a href="#底部导航栏" class="headerlink" title="底部导航栏"></a>底部导航栏</h2><p>通过类似底部导航栏的按钮，让界面切换显示更多的内容。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/bottom_button_patten.gif" width="300" alt=" bottom_button_patten"></div>

<p>这中布局的方式也是苹果iOS的经典布局方式，不知道是Google的原创还是向苹果的致敬。</p>
<p>更加具体的规范请参考<a href="https://material.google.com/components/bottom-navigation.html" target="_blank" rel="external">这里</a>。</p>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>与底部导航栏类似，但是是放在界面上方。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/tabs_patten.png" width="300" alt=" tabs_patten"></div>

<p>更加具体的规范请参考<a href="https://material.google.com/components/tabs.html" target="_blank" rel="external">这里</a>。</p>
<h2 id="动态变化"><a href="#动态变化" class="headerlink" title="动态变化"></a>动态变化</h2><p>我个人认为，界面元素和内容的动态变化，是整个<code>Material Design</code>的精髓。它带给了用户极好的视觉体验，是引导用户注意力的最好方法。</p>
<p>动态是通过<code>过渡动画</code>和<code>滑动效果</code>来实现的。</p>
<h3 id="过渡动画"><a href="#过渡动画" class="headerlink" title="过渡动画"></a>过渡动画</h3><p>在前面的章节已经介绍过了动画的内容，这里就不重复了。</p>
<p>这里就多看几个实际的例子吧。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/navigational-transitions_parent-to-child_patten.gif" width="600" alt=" navigational-transitions_parent-to-child_patten"></div>

<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/raised_btn_effect.gif" width="300" alt=" raised_btn_effect"></div>

<h3 id="滑动效果"><a href="#滑动效果" class="headerlink" title="滑动效果"></a>滑动效果</h3><p>内容切换的时候，尽量的使用滑动的效果。</p>
<p>分页的滑动效果，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/slibing_patten.gif" width="300" alt=" slibing_patten"></div>

<p>AppBar的滑动效果，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/appbar_scroll_toolbar.gif" width="300" alt=" appbar_scroll_toolbar"></div>



]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;界面模式&quot;&gt;&lt;a href=&quot;#界面模式&quot; class=&quot;headerlink&quot; title=&quot;界面模式&quot;&gt;&lt;/a&gt;界面模式&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Material Design&lt;/code&gt;的基础组件我们已经大体了解过了，现在我们看看&lt;code&gt;Materi
    
    </summary>
    
      <category term="第2章-设计原理" scheme="http://book.anddle.com/categories/%E7%AC%AC2%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>8 设计的组件与常用模式</title>
    <link href="http://book.anddle.com/2_%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/8_%E8%AE%BE%E8%AE%A1%E7%9A%84%E7%BB%84%E4%BB%B6%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://book.anddle.com/2_设计原理/8_设计的组件与常用模式/</id>
    <published>2017-01-11T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件与常用模式"><a href="#组件与常用模式" class="headerlink" title="组件与常用模式"></a>组件与常用模式</h1><p>前面已经比较全面的介绍了<code>Material Design</code>相关的设计哲学、设计原理和方法论。这一章开始，我们将看看这些原理是如何在安卓系统当中得到实践的。</p>
<p>一个应用并不是完全从什么都没有来组建的，至少会有一匹一匹的砖嘛。而在界面设计当中，这些能够拿过来就使用的砖块就是控件。</p>
<p>例如，<code>按钮</code> <code>滑动条</code> <code>列表</code>等等，都是可以直接拿过来用的砖块。</p>
<p><code>Material Design</code>最基础的体现，就是看看这些砖长成什么样，以及如何用<code>Material Design</code>的理念将这些砖组合起来，构建成应用的界面。</p>
<p>这样的砖块很多，Google在<code>Material Design</code>的<a href="https://material.io/guidelines" target="_blank" rel="external">规范</a>中给出了详细的定义。</p>
<p>因此我不会一一列举，只是拿出其中一两个最为常见的、最为典型的砖块和大家讨论，看看<code>规范</code>该如何解读和使用。知道了这些典型砖块的实践方式以后，大家就能自己根据<code>设计规范</code>来查看资料了。</p>
<p>我这里选取了<code>按钮</code> <code>列表</code> <code>应用栏</code> <code>系统栏</code>来详细的讨论。</p>
<h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p><code>Material Design</code>中有3类按钮：</p>
<ul>
<li><p>Floating action按钮：前面已经大致介绍过，它是一个圆形的按钮，悬浮在界面之上6dp的位置，当点击的时候，按钮会向上浮动（显示出更大的阴影），是界面中吸引用户的界面元素之一；</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/float_action_btn.png" width="100" alt=" float_action_btn"></div>
</li>
<li><p>Raised按钮：拥有背景颜色（Accent color）的按钮，点击时它在z轴的位置会向上变化；</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/raised_btn.png" width="200" alt=" raised_btn"></div>
</li>
<li><p>Flat按钮：按钮文字有颜色（Accent color）的按钮，点击时它在z轴的位置不会变化；</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/flat_btn.png" width="200" alt=" flat_btn"></div>

</li>
</ul>
<h3 id="Flat按钮"><a href="#Flat按钮" class="headerlink" title="Flat按钮"></a>Flat按钮</h3><p>Flat按钮常常用在<code>toolbar</code>、<code>对话框</code>以及需要与很多文字配合的地方。通常用来告诉用户“我能提供一些轻量级的功能，这些功能并不是我的特色，你知道我有就行”。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/flat_btn_pos.png" width="300" alt=" flat_btn_pos"></div>

<p>它的设计规范如下，</p>
<table>
<thead>
<tr>
<th>项目</th>
<th>数值</th>
</tr>
</thead>
<tbody>
<tr>
<td>最小宽度</td>
<td>88dp</td>
</tr>
<tr>
<td>高度</td>
<td>36dp</td>
</tr>
<tr>
<td>边角弧度半径</td>
<td>2dp</td>
</tr>
<tr>
<td>左右margin</td>
<td>8dp</td>
</tr>
<tr>
<td>左右padding</td>
<td>8dp</td>
</tr>
<tr>
<td>字体大小</td>
<td>15sp</td>
</tr>
</tbody>
</table>
<p>当使用亮色主题并按下按钮的时候，按钮的背景颜色是#999999，透明度为40%；<br>当使用暗色主题并按下按钮的时候，按钮的背景颜色是#CCCCCC，透明度为25%；</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/flat_btn_spec.png" width="500" alt=" flat_btn_spec"></div>

<p>当点击按钮的时候，会出现水波纹一样的动画，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/flat_btn_press_effect.gif" width="200" alt=" flat_btn_press_effect"></div>

<h3 id="Raised按钮"><a href="#Raised按钮" class="headerlink" title="Raised按钮"></a>Raised按钮</h3><p>Raised按钮比Flat按钮能更加吸引用户的注意力。通常用来告诉用户“点击我以后，会启动我一个很重要的功能，你要特别注意”。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/raised_btn_pos.png" width="300" alt=" raised_btn_pos"></div>

<p>它的设计规范如下，</p>
<table>
<thead>
<tr>
<th>项目</th>
<th>数值</th>
</tr>
</thead>
<tbody>
<tr>
<td>最小宽度</td>
<td>88dp</td>
</tr>
<tr>
<td>高度</td>
<td>36dp</td>
</tr>
<tr>
<td>默认z轴位置</td>
<td>2dp</td>
</tr>
<tr>
<td>按下时z轴位置</td>
<td>8dp</td>
</tr>
<tr>
<td>边角弧度半径</td>
<td>2dp</td>
</tr>
<tr>
<td>左右margin</td>
<td>0dp</td>
</tr>
<tr>
<td>左右padding</td>
<td>16dp</td>
</tr>
<tr>
<td>字体大小</td>
<td>15sp</td>
</tr>
</tbody>
</table>
<p>当使用暗色主题时，背景的颜色如下，</p>
<table>
<thead>
<tr>
<th>按钮状态</th>
<th>数值</th>
</tr>
</thead>
<tbody>
<tr>
<td>正常</td>
<td>调色板500类型的颜色</td>
</tr>
<tr>
<td>按下</td>
<td>调色板700类型的颜色</td>
</tr>
</tbody>
</table>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/raised_btn_spec.png" width="600" alt=" raised_btn_spec"></div>

<p>当点击按钮的时候，会出现水波纹一样的动画，之后按钮在Z轴的位置也会提升，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/raised_btn_effect.gif" width="300" alt=" raised_btn_effect"></div>

<h3 id="FloatingAction按钮"><a href="#FloatingAction按钮" class="headerlink" title="FloatingAction按钮"></a>FloatingAction按钮</h3><p>FloatAction按钮是界面当中最引人瞩目的按钮。它代表了这个界面能提供的最重要、最核心的功能。默认情况下它的尺寸是56dp，放在上方会小一点，是40dp。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/float_action_btn_pos.png" width="600" alt=" float_action_btn_pos"></div>

<p>按照中心位置会内嵌一个系统图标，系统图标的大小我们在图标的章节讲过，是24dp。</p>
<p>需要注意的是：并不是所有的界面一定要有个FloatAction按钮，它的存在完全是由应用的逻辑决定的。之所以我们看到那么多界面都有FloatAction按钮，是因为这是<code>Material Design</code>的典型特征，所以选择的很多例子都有它。如果某个界面确实需要FloatAction按钮，那么一个界面上也只能有一个，表明只有一个功能是最为重要的。</p>
<p>FloatAction按钮还有一些常用的使用模式：</p>
<ul>
<li><p>当拥有FloatAction按钮的界面退出的时候，按钮要用动画的形式消失；<br>  当拥有FloatAction按钮的界面显示的时候，按钮要用动画的形式出现；</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/float_action_btn_fade.gif" width="300" alt=" float_action_btn_fade"></div>

<p>  当拥有FloatAction按钮的界面在内部进行切换的时候，按钮要有动态变化的效果；</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/float_action_btn_trans.gif" width="300" alt=" float_action_btn_trans"></div>
</li>
<li><p>按钮点击后可以，展示出更多菜单；</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/float_action_btn_into_menu.gif" width="300" alt=" float_action_btn_into_menu"></div>


</li>
</ul>
<ul>
<li><p>按钮变化成一个新的纸片，纸片上展现更多的内容；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/float_action_btn_into_material.gif" width="300" alt=" float_action_btn_into_materia"></div>

</li>
</ul>
<p>它的设计规范如下，</p>
<table>
<thead>
<tr>
<th>项目</th>
<th>数值</th>
</tr>
</thead>
<tbody>
<tr>
<td>标准尺寸</td>
<td>56dp</td>
</tr>
<tr>
<td>最小尺寸</td>
<td>40dp</td>
</tr>
<tr>
<td>内嵌图标尺寸</td>
<td>24dp</td>
</tr>
<tr>
<td>默认z轴位置</td>
<td>6dp</td>
</tr>
<tr>
<td>按下时z轴位置</td>
<td>12dp</td>
</tr>
<tr>
<td>背景颜色</td>
<td>Accent Color</td>
</tr>
</tbody>
</table>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>接下来，我们看看另外一个会经常用到的组件列表。</p>
<p>列表用来显示展示类型相同的数据，比如都有头像、名字、职务等信息，不同的只是这些信息的具体内容。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/list_example.png" width="300" alt=" list_example"></div>

<p>列表项是列表的一个显示单元，列表项的布局不要超过三行，如果确实要超过三行，那么就不应该使用列表来展示内容了。</p>
<p>列表项的内容根据位置的不同，体现出的重要性也不同：</p>
<ol>
<li>靠左边的内容是最重要的，右边的次之；</li>
<li>靠上边的内容是最重要的，下边的次之；</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/list_item_import_order.png" width="300" alt=" list_item_import_order"></div>

<p>常见的列表布局有以下三种，</p>
<ol>
<li><p>单行：有一行文字的显示</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/list_1_text.png" width="200" alt=" list_1_text"></div><br> <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/list_1_icon_text.png" width="200" alt=" list_1_icon_text"></div><br> <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/list_1_avatar_text.png" width="200" alt=" list_1_avatar_text"></div><br> <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/list_1_avatar_text_icon.png" width="200" alt=" list_1_avatar_text_icon"></div>
</li>
<li><p>双行：有两行文字的显示</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/list_2_text.png" width="200" alt=" list_1_text"></div><br> <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/list_2_icon_text.png" width="200" alt=" list_1_icon_text"></div><br> <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/list_2_avatar_text.png" width="200" alt=" list_1_avatar_text"></div><br> <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/list_2_avatar_text_icon.png" width="200" alt=" list_1_avatar_text_icon"></div>
</li>
<li><p>三行：有三行文字的显示 </p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/list_3_text.png" width="200" alt=" list_1_text"></div><br> <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/list_3_icon_text.png" width="200" alt=" list_1_icon_text"></div><br> <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/list_3_avatar_text.png" width="200" alt=" list_1_avatar_text"></div><br> <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/list_3_avatar_text_icon.png" width="200" alt=" list_1_avatar_text_icon"></div>

</li>
</ol>
<p>这些布局中各个元素的位置，都在<a href="https://material.google.com/components/lists.html" target="_blank" rel="external">规范</a>中有明确的规定，经过<code>按钮</code>那一小节的讲述，我想大家一定具备看懂<code>规范</code>的能力，能够从中找到设置位置的关键点。</p>
<p>在查看上面的示例时，大家应该注意到了列表项的分割线。这些分割线将列表区域按照逻辑区分开来，都是1dp的宽度。</p>
<ul>
<li><p>有的分割线贯穿了整个屏幕；</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/list_full_divider.png" width="300" alt=" list_full_divide"></div>
</li>
<li><p>有的只是将文字的部分分开；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/list_half_divider.png" width="300" alt=" list_half_divide"></div>
</li>
<li><p>有的没有分隔；</p>
</li>
</ul>
<p>to   <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/list_no_divider.png" width="300" alt=" list_no_divide"></div></p>
<p>关于分割线，在<code>Material Design</code>的规范当中，也有专门的<a href="https://material.google.com/components/dividers.html" target="_blank" rel="external">章节</a>细致的讲述。</p>
<h2 id="应用栏与工具栏"><a href="#应用栏与工具栏" class="headerlink" title="应用栏与工具栏"></a>应用栏与工具栏</h2><p>工具栏的作用是把很多操作按钮集中起来，一起展现给用户。它可以放在应用界面的上部分、中间、底部，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/toolbar_top.png" width="350" alt=" toolbar_top"></div><br><div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/toolbar_map.png" width="350" alt=" toolbar_map"></div><br><div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/toolbar_keyboard.png" width="600" alt=" toolbar_keyboard"></div>

<p>在安卓的设计当中，有个<code>ActionBar</code>的概念，它的作用就是展示一个应用的图标、名字，以及菜单、导航栏等内容，从安卓3.0开始它就被提出，并推广了起来。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/app_bar_example.png" width="400" alt=" app_bar_example"></div>

<p>不过从安卓5.0开始，在<code>ActionBar</code>的基础上提出了<code>AppBar</code>。<code>AppBar</code>除了担当<code>ActionBar</code>的功能外，还增加了一些新的特性，例如滑动效果。新引入的具体的控件<code>ToolBar</code>接替了<code>ActionBar</code>的具体功能，成为<code>AppBar</code>最为核心的组件。</p>
<p>为了便于理解，我举一个例子。Google在2015年进行拆分，成立了多家公司，并将它们规整到Alphabet公司旗下。而以前的Google只保留搜索业务，成为了一个比较单纯的公司。</p>
<p><code>ActionBar</code>就相当于以前的Google公司；<code>AppBar</code>相当于Alphabet；<code>ToolBar</code>就是Alphabet成立后的Google。<code>AppBar</code>除了<code>ToolBar</code>以外，还可能包含更多组件在其中。</p>
<p>应用栏的高度根据屏幕横竖状态的不同而不同，</p>
<table>
<thead>
<tr>
<th>屏幕状态</th>
<th>高度</th>
</tr>
</thead>
<tbody>
<tr>
<td>竖屏</td>
<td>56dp</td>
</tr>
<tr>
<td>横屏</td>
<td>48dp</td>
</tr>
</tbody>
</table>
<p>应用栏可以根据开发者的要求，变成透明的、半透明的、甚至不显示。</p>
<p><code>AppBar</code>除了显示标题、菜单等功能外，还有令人炫目的滑动效果，这也是安卓系统使用<code>Material Design</code>的重要特色。</p>
<p><code>AppBar</code>除了<code>Toolbar</code>以外，可以包含<code>分页标签Tabs</code> <code>图片</code>等等内容。<code>图片</code>占用的空间叫做可变空间-<code>Flexible space</code>，不一定就是放图片，也可以放其他的元素，只不过就界面设计来讲，显示图片的效果要很多。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/appbar_area.png" width="300" alt=" appbar_area"></div>

<ul>
<li><p><code>AppBar</code>只有<code>Toolbar</code>：内容滚动的过程中，<code>Toolbar</code>可以被顶到消失；也可通过下拉再次出现。</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/appbar_scroll_toolbar.gif" width="300" alt=" appbar_scroll_toolbar"></div>
</li>
<li><p><code>AppBar</code>有<code>Toolbar</code>和<code>Tab</code>：</p>
<ol>
<li><p>内容滚动的过程中，<code>Toolbar</code>可以被顶到消失，只留下<code>Tab</code>；也可通过下拉再次出现。</p>
</li>
<li><p>内容滚动的过程中，<code>Toolbar</code>和<code>Tab</code>都被顶到消失；也可通过下拉再次出现。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/appbar_scroll_toolbar_tab.gif" width="300" alt=" appbar_scroll_toolbar_tab"></div>
</li>
</ol>
</li>
<li><p><code>AppBar</code>有<code>Toolbar</code>和可变区域：</p>
<ol>
<li><p>内容滚动的过程中，可变区域可以被顶到消失，只留下<code>Toolbar</code>；也可通过下拉再次出现。</p>
</li>
<li><p>内容滚动的过程中，<code>Toolbar</code>和可变区域都被顶到消失；也可通过下拉再次出现。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/appbar_scroll_toolbar_txt.gif" width="300" alt=" appbar_scroll_toolbar_txt"></div><br><div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/appbar_scroll_toolbar_image.gif" width="300" alt=" appbar_scroll_toolbar_image"></div>

</li>
</ol>
</li>
</ul>
<h2 id="状态栏与导航栏"><a href="#状态栏与导航栏" class="headerlink" title="状态栏与导航栏"></a>状态栏与导航栏</h2><p>用过智能手机的同学对状态栏和导航栏一定不会陌生，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/statusbar_example.png" width="350" alt=" statusbar_example"></div><br><div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/navbar_example.png" width="350" alt=" navbar_example"></div>

<p>状态栏贯穿了整个屏幕的宽度，高度是24dp。<br>导航栏同样贯穿了整个屏幕的宽度，高度是48dp。不过在很多国内定制的系统当中，因为手机已经有了实体按键，就取消了导航栏。</p>
<p>状态栏和导航栏的背景颜色是可以各自改变的，透明、半透明、不透明。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/statusbar_status.png" width="600" alt=" statusbar_status"></div><br><div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/navbar_status.png" width="350" alt=" navbar_status"></div>

<p>为了配合不同应用的使用场景，状态栏和导航栏的显示也有不同的表现，</p>
<ul>
<li><p>沙发模式（Lean back）：就像在瘫坐在沙发上看电影时一样，屏幕尽可能的呈现视频内容，把状态栏和导航栏都藏起来。这个过程中你几乎不会去接触到屏幕，当你碰触屏幕的时候，状态栏和导航栏才会出现。</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/full_screen_lean_back.png" width="500" alt=" full_screen_lean_back"></div>
</li>
<li><p>沉浸模式（Immersive）：比如当你在使用阅读软件看书的时候，屏幕只显示书本的内容，把状态栏和导航栏隐藏起来，让你沉浸在阅读的快乐当中。但每次翻页的时候，你还是需要接触屏幕的。虽然翻页的过程中接触了屏幕，状态栏和导航栏也不会出现，除非你在屏幕的边缘做了一个滑动的动作，才能将它们再次唤出。</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/full_screen_immersive.png" width="600" alt=" full_screen_immersive"></div>
</li>
<li><p>关灯模式（Light out）：当你不碰触屏幕超过一定的时间，状态栏会自动的隐退；导航栏虽然还在那里，但是那三个操作的按钮却变成了三个小点。这个过程就好像是关闭了照亮屏幕的灯，状态栏和导航栏似乎还在那里，只是没有了灯光，已经看的不真切了。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;组件与常用模式&quot;&gt;&lt;a href=&quot;#组件与常用模式&quot; class=&quot;headerlink&quot; title=&quot;组件与常用模式&quot;&gt;&lt;/a&gt;组件与常用模式&lt;/h1&gt;&lt;p&gt;前面已经比较全面的介绍了&lt;code&gt;Material Design&lt;/code&gt;相关的设计哲学、设计
    
    </summary>
    
      <category term="第2章-设计原理" scheme="http://book.anddle.com/categories/%E7%AC%AC2%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>7 声音与触觉的利用</title>
    <link href="http://book.anddle.com/2_%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/7_%E5%A3%B0%E9%9F%B3%E4%B8%8E%E8%A7%A6%E8%A7%89%E7%9A%84%E5%88%A9%E7%94%A8/"/>
    <id>http://book.anddle.com/2_设计原理/7_声音与触觉的利用/</id>
    <published>2017-01-10T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="声音与触觉的利用"><a href="#声音与触觉的利用" class="headerlink" title="声音与触觉的利用"></a>声音与触觉的利用</h1><p>之前我们对设计的讨论都是几种在视觉基础之上的。但除了视觉，我们人还拥有听觉、嗅觉、触觉、味觉等感知大自然的能力。</p>
<p>现在由于技术的限制，嗅觉和味觉在移动设备领域的使用还无法派上用场，但是听觉和触觉正在扩大对我们使用的影响。</p>
<h2 id="声音的影响"><a href="#声音的影响" class="headerlink" title="声音的影响"></a>声音的影响</h2><p>最经典的听觉案例有2个，和大家分享一下。</p>
<p>一个是当年诺基亚的开机铃声，我想使用过诺基亚手机的同学每当听到这个声音一定会想到它那经典的台词，科技与人为本，然后就是两只手紧握的图案。这个例子正是通过声音，将用户和手机联系在一起。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/nokia_poweron_logo.png" width="200" alt=" nokia_poweron_logo"></div>

<p>还有一个就是iPhone的手机铃声，<br>走在大街上，如果听到这个铃声，很多iPhone用户都会不自觉的去摸一下自己的手机。这个声音改变了用户的行为模式，即使知道可能不是自己的手机在响，但总会下意识去摸一下自己的手机。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/iphone_device.jpg" width="600" alt=" iphone_device"></div>

<p>与手机铃声不同，短信声音就显得非常短小精干，让你知道短信的存在，也不会太打扰你正在做的事情。</p>
<p>照相的声音、屏幕锁定的声音、键盘打字时的声音…… 每个声音都有它想传达的意境。</p>
<h2 id="触觉的作用"><a href="#触觉的作用" class="headerlink" title="触觉的作用"></a>触觉的作用</h2><p>触觉能带给用户更好的反馈体验。</p>
<p>当我们不方便开启铃声的时候，震动反馈就能告诉用户有电话来了、有消息需要查收。</p>
<p>苹果公司开发出的感知压力的屏幕，也给界面交互提供了更多的选择。手机通过感知用户按压屏幕时的不同力度，给用户提供不一样的操作响应。</p>
<p>我们可以设想一下这样一个将来会出现的使用场景：用户通过点击屏幕输入文字的时候，屏幕能感受到压力，并根据压力的不同，在被点击的区域产生响应的震动。这样就可以模拟用户打字的力反馈，给用户带来更好使用体验。</p>
<hr>
<p>对于我们设计师或者开发者来讲，声音和触觉的设计就不属于我们讨论的内容了，它们涉及到另外一个专业的领域。我们还是把精力集中到视觉和功能上的旅程吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;声音与触觉的利用&quot;&gt;&lt;a href=&quot;#声音与触觉的利用&quot; class=&quot;headerlink&quot; title=&quot;声音与触觉的利用&quot;&gt;&lt;/a&gt;声音与触觉的利用&lt;/h1&gt;&lt;p&gt;之前我们对设计的讨论都是几种在视觉基础之上的。但除了视觉，我们人还拥有听觉、嗅觉、触觉、味觉
    
    </summary>
    
      <category term="第2章-设计原理" scheme="http://book.anddle.com/categories/%E7%AC%AC2%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>6 动画效果</title>
    <link href="http://book.anddle.com/2_%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/6_%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
    <id>http://book.anddle.com/2_设计原理/6_动画效果/</id>
    <published>2017-01-09T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h1><p>运动的物体总是能最有效的吸引住人类的注意力。在界面设计的领域，也是一样，当你希望用户的注意力从一个点转移到另一点，在这两点之间设计一个迁移的动画是在合适不过的了。</p>
<p>动画基本上可以分成以下几类：</p>
<ol>
<li><p>平移动画：</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/anim_trans.gif" width="200" alt=" anim_trans"></div>
</li>
<li><p>渐变动画：</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/anim_fade.gif" width="200" alt=" anim_fade"></div>
</li>
<li><p>缩放动画：</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/anim_scale.gif" width="200" alt=" anim_scale"></div>
</li>
<li><p>旋转动画</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/anim_rotate.gif" width="200" alt=" anim_rotate"></div>

</li>
</ol>
<p>其他所有的动画基本上都是这些单一的动画，或者多个动画的叠加。例如，一边平移一遍放大。</p>
<p>动画由两个要素：一个是上面各种动画体现出的空间变化；另一个就是动画相对于时间的变化。</p>
<p><code>Material Design</code>从真实的世界当中借鉴了重力和摩擦力对事物的影响，用它们来设计动画在时间维度上的变化。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/motion_with_time.gif" width="500" alt=" motion_with_time"></div>

<h2 id="动画的时间要素"><a href="#动画的时间要素" class="headerlink" title="动画的时间要素"></a>动画的时间要素</h2><p>一个动画持续的时间要控制在300左右，短了用户看不清，长了太拖沓。</p>
<p>动画变化的速度要平缓，主要有以下几种速度：</p>
<ul>
<li><p>标准速度曲线：速度先快后慢</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/motion_standard_curve.gif" width="500" alt=" motion_standard_curve"></div>
</li>
<li><p>减速曲线：速度从快到慢</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/motion_deceleration_curve.gif" width="500" alt=" motion_deceleration_curve"></div>
</li>
<li><p>加速曲线：速度从慢到快</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/motion_acceleration_curve.gif" width="500" alt=" motion_acceleration_curve"></div>
</li>
<li><p>陡峭曲线：速度变化快速</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/motion_sharp_curve.gif" width="500" alt=" motion_sharp_curve"></div>

</li>
</ul>
<p>这些速度是<code>Material Design</code>动画效果的基石。我们看到的那些自然的动画，都是依靠这些速度的配合而形成的。</p>
<h2 id="使用动画的对象"><a href="#使用动画的对象" class="headerlink" title="使用动画的对象"></a>使用动画的对象</h2><p>为了突出重点，吸引用户的注意力，动画的使用场景可以归纳成如下几点：</p>
<ul>
<li>应用的界面切换：例如屏幕中进入或者退出一个对象物体。</li>
<li>元素属性的变化：例如屏幕中一个物体的形状发生变化。</li>
<li>内容的迁移：例如通过屏幕中的局部内容展现更多内容。</li>
<li>点击的反馈：当用户点击屏幕时，提供视觉上的动态效果。</li>
</ul>
<h3 id="界面切换"><a href="#界面切换" class="headerlink" title="界面切换"></a>界面切换</h3><p>界面切换的效果，根据切换的内容不同，速度也有一些变化：</p>
<ol>
<li>整个屏幕的切换，动画效果控制在375ms；</li>
<li>小的元素进入屏幕，动画效果持续225ms；</li>
<li>小的元素离开屏幕，动画效果持续195ms；</li>
</ol>
<ul>
<li><p>当一组对象被移动的时候，使用<code>标准曲线</code>，</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/motion_group_objects_moving_standard_curve.gif" width="300" alt=" motion_group_objects_moving_standard_curve"></div>
</li>
<li><p>当一个对象进入屏幕的时候，使用<code>减速曲线</code>，<br>当一个对象离开屏幕不再回来的时候，使用<code>加速曲线</code>，</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/motion_leave_screen_forever_acc_curve.gif" width="300" alt=" motion_leave_screen_forever_acc_curve"></div>
</li>
<li><p>当一个对象暂时离开屏幕、但随后还要回来的时候，使用<code>陡峭曲线</code>，</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/motion_slider_leavescreen_temperily_sharp.gif" width="300" alt=" motion_slider_leavescreen_temperily_sharp"></div>

</li>
</ul>
<h3 id="元素属性变化"><a href="#元素属性变化" class="headerlink" title="元素属性变化"></a>元素属性变化</h3><ul>
<li><p>矩形变化：矩形的长宽发生变化。长与宽不同时变化，</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/motion_rect_change_async.gif" width="600" alt=" motion_rect_change_asyn"></div>

<p>  长与宽同时变化，</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/motion_rect_change_sync.gif" width="600" alt=" motion_rect_change_syn"></div>


</li>
</ul>
<ul>
<li><p>圆形展开：圆形逐渐扩大，展开成矩形，</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/motion_circle_to_rect_without_move.gif" width="300" alt=" motion_circle_to_rect_without_move"></div>

<p>  圆形先做一个平移的动画，再展开成矩形，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/motion_circle_to_rect_with_move.gif" width="300" alt=" motion_circle_to_rect_with_move"></div>
</li>
<li><p>合并与分割：多个矩形从分裂的状态聚合到一起形成整体；一个整体分裂开，成为独立的部分，</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/motion_rows_merge.gif" width="300" alt=" motion_rows_merge"></div>

</li>
</ul>
<h3 id="内容迁移"><a href="#内容迁移" class="headerlink" title="内容迁移"></a>内容迁移</h3><p>简单的说，就是把显示出的部分内容，扩展成完整的内容，</p>
<ul>
<li><p>将现有的内容，原封不动的扩展出更多内容，</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/motion_keep_ori_show_more.gif" width="600" alt=" motion_keep_ori_show_more"></div>

<p>  视频中的圆形和矩形，在动画前后都保留了下来。只是通过平移和缩放的动画，把之前隐藏的内容显示了出来。</p>
</li>
<li><p>保留关键内容，扩展出更多内容，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/motion_share_key_element.gif" width="300" alt=" motion_share_key_element"></div>

<p>  视频中的圆形得到了保留，其他元素被隐藏起来。动画过程中显现了更多的界面元素。</p>
</li>
</ul>
<h3 id="点击的反馈"><a href="#点击的反馈" class="headerlink" title="点击的反馈"></a>点击的反馈</h3><p>为了增加用户点击屏幕时的视觉反馈，<code>Material Design</code>对按钮、列表等拥有点击交互的组件增加了水波纹效果-<code>ripple</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/motion_ripple_effect.gif" width="400" alt=" motion_ripple_effect"></div>


]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动画效果&quot;&gt;&lt;a href=&quot;#动画效果&quot; class=&quot;headerlink&quot; title=&quot;动画效果&quot;&gt;&lt;/a&gt;动画效果&lt;/h1&gt;&lt;p&gt;运动的物体总是能最有效的吸引住人类的注意力。在界面设计的领域，也是一样，当你希望用户的注意力从一个点转移到另一点，在这两点之
    
    </summary>
    
      <category term="第2章-设计原理" scheme="http://book.anddle.com/categories/%E7%AC%AC2%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>5 图标的使用</title>
    <link href="http://book.anddle.com/2_%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/5_%E5%9B%BE%E6%A0%87%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://book.anddle.com/2_设计原理/5_图标的使用/</id>
    <published>2017-01-08T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图标的使用"><a href="#图标的使用" class="headerlink" title="图标的使用"></a>图标的使用</h1><p>图标能给人带来最直观的印象，有的时候再多的解释也抵不过一个图标。</p>
<p>安卓应用的图标分成两类，</p>
<ul>
<li><p>应用图标：在主界面上代表着整个应用的那个启动图标，是给用户第一印象的图标。一个应用开发成功后会不会被用户下载，也许就取决于用户看它的第一眼。</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/app_icons_example.png" width="300" alt=" app_icons_example"></div>
</li>
<li><p>系统图标：在应用里面使用的各种具有特别意义的图标，引导用户进行更多的操作。</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/system_icons.png" width="500" alt=" system_icons"></div>

</li>
</ul>
<h2 id="应用图标"><a href="#应用图标" class="headerlink" title="应用图标"></a>应用图标</h2><p>应用图标的设计也是对<code>Material Design</code>的一种体现：制作应用图标的过程，就是对一张纸进行裁剪、折叠、上色、增加阴影的过程。</p>
<p>虽然应用图标可以被设计得千奇百怪，但是它还是有很多的套路可以使用的，只要遵守这些套路，你设计出来的图标也不会难看到哪里去。</p>
<p>先来说说应用图标的一定要执行的规则：</p>
<ol>
<li><p>Google给出了图标设计的网格图。设计应用图标的时候，要参考这个网格对图案进行布局和排列。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/app_icon_grid_keyline.png" width="300" alt=" app_icon_grid_keyline"></div>
</li>
<li><p>安卓系统希望应用的图标框定在48dp尺寸方框以内，并且拥有1dp的边框（包含在48dp的尺寸以内）。为了作图的细致，建议我们将48dp的图标先放大4倍，也就是变成192dp（边框4dp），再进行设计。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/app_icon_grid_scale.png" width="600" alt=" app_icon_grid_scale"></div>
</li>
<li><p>图标可以根据设计线，做成圆角方形、圆形、竖长方形、横长方形。各个形状的区域尺寸分别是：</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/2_5_table_app_icon_size.png" width="200" alt=" 2_5_table_app_icon_size"></div>

 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/app_icon_shape.png" width="500" alt=" app_icon_shape"></div>

<p> 需要注意的是：虽然图标的形状不同，但是它们都是被限定在了192dp（缩放后）的正方形方框当中；标注出的尺寸都是放大了4倍以后的尺寸。</p>
</li>
<li><p>图标制作的时候，选择简单明了的几何图行。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/system_icons.png" width="500" alt=" system_icons"></div>

</li>
</ol>
<p>之后就是和设计相关的要素了。一个图标由7个要素组成：</p>
<ol>
<li><p>背景：图标的背景，这个背景的大小是由图标的形状决定的，例如圆角方形、圆形等等，并不占用图标的整个区域。</p>
</li>
<li><p>前景：图标的前景，通常就是表达应用含义的几何图形。</p>
</li>
<li><p>颜色：颜色的选择与应用界面颜色的选择一样，要选择能体现应用内容的色调。颜色不宜不多，最好不要超过3个。颜色可以只是放在前景当中，也可以只放在背景当中。</p>
</li>
<li><p>tint边沿：tint是一个遮罩，可以把它理解成给图层带上了一顶帽子。这顶帽子可以有自己的颜色和透明度，与它盖住的图层混合，显示出不同的效果。我们会在后面详细讲述tint。tint边沿出现在前景和背景的上边沿。它是有规定的：</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/2_5_table_system_icon_tint.png" width="150" alt=" 2_5_table_system_icon_tint"></div>
</li>
<li><p>阴影边沿：出现在前景和背景的下边沿。它是有规定的：</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/2_5_table_system_icon_edge.png" width="200" alt=" 2_5_table_system_icon_edge"></div>
</li>
<li><p>阴影：前景在背景上会留下投影，这个投影也是有规定的：</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/2_5_table_system_icon_shadow.png" width="200" alt=" 2_5_table_system_icon_shadow"></div>

<p> 前景相对于背景的高度是1dp。</p>
</li>
<li><p>光照：图标拥有从左上方45度角照射过来的光源。要注意的是：这个光源仅仅局限在图标的内部。光源的属性如下：</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/2_5_table_system_icon_light.png" width="200" alt=" 2_5_table_system_icon_light"></div>

</li>
</ol>
<p>最后我们讲讲前面提到的tint与shade的颜色。<br>tint与shade都是在原来图层的上方添加一个遮罩，让遮罩与图层叠加，产生不同的颜色效果。</p>
<ol>
<li><p>首先确定主色调的类型：冷色？暖色？</p>
</li>
<li><p>根据下表，选择tint与shade的颜色。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/app_icon_color_cool.png" width="500" alt=" app_icon_color_cool"></div><br> <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/app_icon_color_fresh.png" width="500" alt=" app_icon_color_fresh"></div><br> <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/app_icon_color_hot.png" width="500" alt=" app_icon_color_hot"></div><br> <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/app_icon_color_warm.png" width="500" alt=" app_icon_color_war"></div><br> <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/app_icon_color_neutral.png" width="500" alt=" app_icon_color_neutra"></div>

</li>
</ol>
<p>例如主颜色是Yellow 500，它属于<code>Warn</code>暖色。因此，</p>
<ul>
<li><p>它的tint颜色就是主颜色添加20%的白色。</p>
</li>
<li><p>它的shade颜色就是主颜色，添加20%的Deep Orange 900</p>
</li>
</ul>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/app_icon_color_example.png" width="500" alt=" app_icon_color_example"></div>

<h2 id="系统图标"><a href="#系统图标" class="headerlink" title="系统图标"></a>系统图标</h2><p>下面这些常见的图标都是系统图标。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/system_icons.png" width="500" alt=" system_icons"></div>

<p>它们都是使用粗线条的几何图案，非常简约。设计系统图标也是很套路的事情。</p>
<p>先来说说应用图标的一定要执行的规则：</p>
<ol>
<li><p>Google为这个类型的图标设计了网格图，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/system_icon_grid_keyline.png" width="200" alt=" system_icon_grid_keyline"></div>
</li>
<li><p>安卓系统希望应用的图标框定在24dp尺寸方框以内。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/system_icon_grid_scale.png" width="300" alt=" system_icon_grid_scale"></div>
</li>
<li><p>图案在20*20以内，多余的4dp作为边框空着。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/system_icon_area.png" width="300" alt=" system_icon_area"></div>
</li>
<li><p>图标可以根据设计线，做成圆角方形、圆形、竖长方形、横长方形。各个形状的区域尺寸分别是：</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/2_5_table_system_icon_size.png" width="200" alt=" 2_5_table_system_icon_size"></div>

 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/system_icon_shape.png" width="400" alt=" system_icon_shape"></div>

<p> 需要注意的是：虽然图标的形状可能不同，但是它们都是被限定在了24dp的正方形的方框当中。</p>
</li>
</ol>
<p>之后就是和设计相关的要素了：</p>
<ol>
<li><p>图标的外部边缘都是2dp的弧形，而内部边缘都是方形；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/system_corner_key_point.png" width="500" alt=" system_corner_key_point"></div>
</li>
<li><p>做图的笔划粗细要一致，而且笔划是方形的。笔划掉粗细是2dp。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/system_icon_stroke.png" width="500" alt=" system_icon_stroke"></div>

<p> 假如图形很复杂，2dp实在是显得拥挤，那可以适当用细一些的笔划，例如1.5dp。如果还很难画，那就的想想是不是你的图标太复杂，要考虑更简单的图案了。</p>
</li>
<li><p>图标在界面上布局的时候，要让它拥有额外的边距。加上边距，整个图标的尺寸要达到48dp。也就是说，它上下左右的边距要有24dp。为什么呢？因为系统图标大多是需要让用户点击的，经过测试，人的手指点击时接触屏幕的区域大小差不多就是48dp。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/system_icon_touch_area.png" width="300" alt=" system_icon_touch_area"></div>
</li>
<li><p>此外，在使用几何图形作为图标的时候，要选择平面的图形，有3D效果的就不需要了，因为<code>Material Design</code>是扁平化的设计。</p>
</li>
</ol>
<p>系统图标的颜色设置也有需要遵循的规则，在亮暗不同的背景下，颜色不同，</p>
<ul>
<li><p>在亮背景下，使用黑色：</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/2_5_table_system_icon_color_light_theme.png" width="300" alt=" 2_5_table_system_icon_color_light_theme"></div>

  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/system_icon_color_light_bg.png" width="400" alt=" system_icon_color_light_bg"></div>


</li>
</ul>
<ul>
<li><p>在暗背景下，使用白色：</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/2_5_table_system_icon_color_dark_theme.png" width="300" alt=" 2_5_table_system_icon_color_dark_theme"></div>

  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/system_icon_color_dark_bg.png" width="400" alt=" system_icon_color_dark_bg"></div>

</li>
</ul>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>知道了制作图标的规则，一切就好办了。如果你是设计高手，可以用工具，从无到有，完全自己画一个图标。如果你时间有限、不善此道，那么可以从网上找到很多设计图标的素材。</p>
<p>Google在<a href="https://material.io/icons/" target="_blank" rel="external">官网</a>上放出了很多现成的图标素材，涵盖了很多门类，基本上够我们直接拿过来使用了。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_icon_official_website.png" width="600" alt=" material_icon_official_website"></div>

<p>阿里也提供了一个收集了很多图标的网站<a href="http://www.iconfont.cn/" target="_blank" rel="external">iconfont</a>，我们需要某个类型的图标时，可以去上面搜索。这几乎一定能满足我们的需要。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/iconfount_website.png" width="600" alt=" iconfount_website"></div>

<p>制作图标的素材最好是矢量图，这样随便缩放素材的大小，图案的边缘都可以清晰可见。而且向我们要使用的图标素材都是很简单的几何图形，矢量图占用的存储空间会非常的小。</p>
<p>还有一个实用的图标制作工具网站<a href="http://romannurik.github.io/AndroidAssetStudio/" target="_blank" rel="external">Android Asset Studio</a>。你可以选择制作应用图标或者系统图标，调整好参数以后，就能将图标下载到本地使用。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/android_asset_studio1.png" width="600" alt=" android_asset_studio1"></div>

<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/android_asset_studio2.png" width="600" alt=" android_asset_studio2"></div>

]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;图标的使用&quot;&gt;&lt;a href=&quot;#图标的使用&quot; class=&quot;headerlink&quot; title=&quot;图标的使用&quot;&gt;&lt;/a&gt;图标的使用&lt;/h1&gt;&lt;p&gt;图标能给人带来最直观的印象，有的时候再多的解释也抵不过一个图标。&lt;/p&gt;
&lt;p&gt;安卓应用的图标分成两类，&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="第2章-设计原理" scheme="http://book.anddle.com/categories/%E7%AC%AC2%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>4 文字的使用</title>
    <link href="http://book.anddle.com/2_%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/4_%E6%96%87%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://book.anddle.com/2_设计原理/4_文字的使用/</id>
    <published>2017-01-07T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文字的使用"><a href="#文字的使用" class="headerlink" title="文字的使用"></a>文字的使用</h1><p>文字是应用当中使用最多的要素。显示一段供用户阅读的文字，程序运行时的信息提示都离不开它。</p>
<p>文字是内容的实际体现者，因此设计师需要将用户的注意力尽可能的吸引到文字当中。</p>
<p>字体可以分成两种类型：有衬线的-<code>serif</code>；无衬线的-<code>sans-serif</code>，也简称<code>sans</code>。<code>serif</code>的笔划端部会多出来一截修饰；<code>sans</code>的笔划端部是平的。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/serif_sans_difference2.png" width="450" alt=" serif_sans_difference2"></div>

<p>在过去，<code>serif</code>通常用来做文章的内容，<code>sans</code>用来做标题；但是现在，内容也开始使用<code>serif</code>了，这是一种新的趋势。在安卓系统中，就采用了<code>sans</code>字体做文字的默认显示。</p>
<p>不同的文字内容，需要吸引用户不同程度的注意力。例如，按钮上的文字和内容都需要吸引用户的注意力，但是它们的重要程度是不一样的。这种吸引的程度可以通过<code>字体的大小</code>和<code>字体的颜色</code>来实现。</p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>前面提到的<code>serif</code>与<code>sans-serif</code>是通过衬线将字体分成了2类。接下来我们开始认识认识字体。</p>
<p>从文字的形状出发，可以将文字分成三类，</p>
<ol>
<li><p>English-like：英文、拉丁文等字母组合型的文字；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/english_script_type.png" width="200" alt=" english_script_type"></div>
</li>
<li><p>Tall：像阿拉伯文字、泰文这种像绘画片段组合成的文字；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/tall_script_type.png" width="200" alt=" tall_script_type"></div>
</li>
<li><p>Dense：像中文、日文、韩文等具有高密度笔画等文字；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/dense_script_type.png" width="200" alt=" dense_script_type"></div>

</li>
</ol>
<p>我们主要进行中文应用的开发，所以会遇到很多<code>Dense</code>类型的字体。</p>
<p><code>字体</code>和<code>某个具体的字体</code>是两个不同的概念，前者是对具有相同间架结构文字的总称，是个很宽泛的概念；而具体的字体指的是使用时，为了显示某个文字而具体使用的文字形状。</p>
<p>例如<code>Arial</code>字体，它下面就拥有多个<code>子项目</code>-<code>字体家族</code>。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/arial_font.png" width="300" alt=" arial_font"></div>

<p>字体家族-<code>font family</code>是一个家族的名字，它的下面可以有多种字形-<code>style</code>。例如<code>Arial</code>字体家族，它就拥有多个字形：<code>Regular-常规</code> <code>Italic-斜体</code> <code>Bold-粗体</code> <code>Bold Italic-斜粗体</code>，这几种字形也是其他字体家族中最经常具有的。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/font_style.png" width="600" alt=" font_style"></div>

<p>某个具体的字体，例如<code>Arial Regular</code>，就是由它所在的字体家族和字形来决定。所以每说到一个具体的字体，都可以找到它对应的字体家族和字形。</p>
<p>例如下面的<code>Arial</code> <code>Arial Black</code> <code>Arial Hebrew</code>，分别对应着3种不同的字体家族；而每个字体家族下面都有各自具体的字型。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/fontfamily_sample.png" width="200" alt=" fontfamily_sample"></div>

<p>可以看到，有的字体家族下面可以只存在一种字形，也可以存在多种字形。这就完全看字体设计师的实现了。</p>
<p><em>例子里面的字体都是<code>Arial</code>字体，它下面的子项名称中虽然都有<code>Arial</code>，但都属于不同的字体家族。</em></p>
<h3 id="Noto"><a href="#Noto" class="headerlink" title="Noto"></a>Noto</h3><p>对于<code>Dense</code>类型的文字，安卓系统使用Google提供的开源字体<code>Noto</code>。</p>
<p><code>Noto</code>字体家族本身拥有了很多字体：Noto Sans，Noto Serif，Noto Momo……。</p>
<p><code>Noto</code>拥有从英文字母到汉字的所有文字，对于我们开发中文应用，完全没有问题。显示简体中文的时候，使用的是<code>Noto Sans CJK SC</code>。</p>
<p>Noto有7种字形：Thin，Light，DemiLight，Regular，Medium，Bold，Black。它们对应的具体字体的粗细是各不相同。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/noto_font_weight.png" width="300" alt=" noto_font_weight"></div>

<p>关于<code>Noto</code>字体名字的由来，还有一个这样的小故事：</p>
<p><em>电脑中显示字符的时候，如果系统中没有安装对应的字体，那么就会在屏幕上显示一个空白的方框-<code>口</code>来代替。如果连续出现很多个不能显示的文字，显示的内容就像是<code>口口口口口</code>。外国人觉得这个方框像我们中国的豆腐，于是就叫它<code>tofu</code>。为了消灭这些豆腐，<code>No tofu</code>的口号就成为了<code>Noto</code>的名字。看来<code>Noto</code>为此发了大愿，消灭文字显示中的一切盲区。</em></p>
<p>大家可以在Google提供的<a href="https://www.google.com/get/noto" target="_blank" rel="external">官方网站</a>获得<code>Noto</code>字体更为细节的信息。</p>
<h3 id="Roboto"><a href="#Roboto" class="headerlink" title="Roboto"></a>Roboto</h3><p>对于<code>English-like</code>类型的文字，安卓系统使用Google提供的开源字体<code>Roboto</code>，它看上去要宽且圆润，现在在很多平台上得到了广泛的应用。</p>
<p>Roboto有6种字形：Thin，Light，Regular，Medium，Bold，Black。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/roboto_font_weight.png" width="200" alt=" roboto_font_weight"></div>

<p><code>Roboto</code>与<code>Noto</code>是兼容的，当选定Roboto的一种粗细的笔划时，就能在<code>Noto</code>当中找到对应粗细的笔划。</p>
<p>大家可以在Google提供的<a href="https://fonts.google.com/" target="_blank" rel="external">官方网站</a>获得<code>Roboto</code>字体更为细节的信息。</p>
<h2 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h2><p>不同的位置，文字显示的大小也可能有所不同。<code>Material Design</code>对界面上各个显示元素中使用到的文字大小，作出了规定。</p>
<p>显示<code>English-like</code>内容的时候，在中文系统中显示英文：</p>
<table>
<thead>
<tr>
<th style="text-align:center">显示的位置</th>
<th style="text-align:center">字体类型</th>
<th style="text-align:center">字体大小</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Display 4</td>
<td style="text-align:center">Light</td>
<td style="text-align:center">112sp</td>
</tr>
<tr>
<td style="text-align:center">Display 3</td>
<td style="text-align:center">Regular</td>
<td style="text-align:center">56sp</td>
</tr>
<tr>
<td style="text-align:center">Display 2</td>
<td style="text-align:center">Regular</td>
<td style="text-align:center">45sp</td>
</tr>
<tr>
<td style="text-align:center">Display 1</td>
<td style="text-align:center">Regular</td>
<td style="text-align:center">34sp</td>
</tr>
<tr>
<td style="text-align:center">Headline</td>
<td style="text-align:center">Regular</td>
<td style="text-align:center">24sp</td>
</tr>
<tr>
<td style="text-align:center">Title</td>
<td style="text-align:center">Medium</td>
<td style="text-align:center">20sp</td>
</tr>
<tr>
<td style="text-align:center">Subheading</td>
<td style="text-align:center">Regular</td>
<td style="text-align:center">16sp</td>
</tr>
<tr>
<td style="text-align:center">Body 2</td>
<td style="text-align:center">Medium</td>
<td style="text-align:center">14sp</td>
</tr>
<tr>
<td style="text-align:center">Body 1</td>
<td style="text-align:center">Regular</td>
<td style="text-align:center">14sp</td>
</tr>
<tr>
<td style="text-align:center">Caption</td>
<td style="text-align:center">Regular</td>
<td style="text-align:center">12sp</td>
</tr>
<tr>
<td style="text-align:center">Button</td>
<td style="text-align:center">Meduim</td>
<td style="text-align:center">14sp</td>
</tr>
</tbody>
</table>
<p>显示<code>Dense</code>内容的时候，在中文系统中显示汉字：</p>
<table>
<thead>
<tr>
<th style="text-align:center">显示的位置</th>
<th style="text-align:center">字体类型</th>
<th style="text-align:center">字体大小</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Display 4</td>
<td style="text-align:center">Light</td>
<td style="text-align:center">112sp</td>
</tr>
<tr>
<td style="text-align:center">Display 3</td>
<td style="text-align:center">Regular</td>
<td style="text-align:center">56sp</td>
</tr>
<tr>
<td style="text-align:center">Display 2</td>
<td style="text-align:center">Regular</td>
<td style="text-align:center">45sp</td>
</tr>
<tr>
<td style="text-align:center">Display 1</td>
<td style="text-align:center">Regular</td>
<td style="text-align:center">34sp</td>
</tr>
<tr>
<td style="text-align:center">Headline</td>
<td style="text-align:center">Regular</td>
<td style="text-align:center">24sp</td>
</tr>
<tr>
<td style="text-align:center">Title</td>
<td style="text-align:center">Medium</td>
<td style="text-align:center">21sp</td>
</tr>
<tr>
<td style="text-align:center">Subheading</td>
<td style="text-align:center">Regular</td>
<td style="text-align:center">17sp</td>
</tr>
<tr>
<td style="text-align:center">Body 2</td>
<td style="text-align:center">Medium</td>
<td style="text-align:center">15sp</td>
</tr>
<tr>
<td style="text-align:center">Body 1</td>
<td style="text-align:center">Regular</td>
<td style="text-align:center">15sp</td>
</tr>
<tr>
<td style="text-align:center">Caption</td>
<td style="text-align:center">Regular</td>
<td style="text-align:center">13sp</td>
</tr>
<tr>
<td style="text-align:center">Button</td>
<td style="text-align:center">Meduim</td>
<td style="text-align:center">15sp</td>
</tr>
</tbody>
</table>
<p>规律就是，显示正文时（从<code>title</code>开始），中文比显示英文要大1sp。</p>
<p><em><code>Display</code>对大家来说可能比较陌生：它的用法是将文字作为一个大区域的显示，例如手机待机时屏幕上显示的时间信息，就是将文字当作<code>Display</code>来运用的。</em></p>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>为了便于用户阅读，让用户有良好的阅读体验，我们还要考虑文字当中，</p>
<ul>
<li><p>行之间的间距。</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/2_4_table_text_format.png" width="300" alt=" 2_4_table_text_format"></div>
</li>
<li><p>每一行占据的宽度。对于长段的内容，字符控制在60个每行；对于简短的内容，字符控制在30个每行。</p>
</li>
</ul>
<h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>文字使用的颜色与背景的颜色相关，采用白色或者黑色，目的是提高文字的可读性，不要让文字的颜色和背景的颜色混在一起。</p>
<p>文字的颜色需要根据显示的位置体现出不同的深浅颜色。这种颜色的深浅是通过调整字体的透明度实现的，而不是将字体设置成一种灰色。</p>
<h3 id="字体颜色"><a href="#字体颜色" class="headerlink" title="字体颜色"></a>字体颜色</h3><p>安卓系统根据显示内容的重要性，将文字主要分成了好些类：textColorPrimary textColorSecondary <code>textColorPrimaryActivated textColorSecondaryInverse</code> 等等。不过最重要的就是：</p>
<ul>
<li><code>textColorPrimary</code>：就是<code>Primary text</code>-主要文字内容使用的颜色。它使用在文字的<code>title</code>，<code>headline</code>，<code>subhead</code>，<code>Body1～2</code>，<code>Button</code>这些位置。</li>
<li><code>textColorSecondary</code>：就是<code>Secondary text</code>-次要文字内容使用的颜色。它使用在<code>Display 1～4</code>，<code>Caption</code>这些位置。</li>
</ul>
<h3 id="浅色背景"><a href="#浅色背景" class="headerlink" title="浅色背景"></a>浅色背景</h3><p>对于浅色背景，字体使用纯黑色-<code>#000000</code>，根据使用场景的不同，透明度不同，</p>
<table>
<thead>
<tr>
<th style="text-align:center">使用的场景</th>
<th style="text-align:center">透明度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Primary text</td>
<td style="text-align:center">87%</td>
</tr>
<tr>
<td style="text-align:center">Secondary text</td>
<td style="text-align:center">54%</td>
</tr>
<tr>
<td style="text-align:center">Disable text, Hint text</td>
<td style="text-align:center">38%</td>
</tr>
</tbody>
</table>
<p>假如文字需要与图标配合使用，那么文字的颜色也是使用纯黑色-<code>#000000</code>，但是会根据图片当前是否处于激活的状态而不同，</p>
<table>
<thead>
<tr>
<th style="text-align:center">图标激活状态</th>
<th style="text-align:center">图标对应文字的透明度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">激活</td>
<td style="text-align:center">54%</td>
</tr>
<tr>
<td style="text-align:center">未激活</td>
<td style="text-align:center">38%</td>
</tr>
</tbody>
</table>
<h3 id="深色背景"><a href="#深色背景" class="headerlink" title="深色背景"></a>深色背景</h3><p>对于深色背景，字体使用纯白色-<code>#FFFFFF</code>，根据使用场景的不同，透明度不同，</p>
<table>
<thead>
<tr>
<th style="text-align:center">使用的场景</th>
<th style="text-align:center">透明度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Primary text</td>
<td style="text-align:center">100%</td>
</tr>
<tr>
<td style="text-align:center">Secondary text</td>
<td style="text-align:center">70%</td>
</tr>
<tr>
<td style="text-align:center">Disable text, Hint text</td>
<td style="text-align:center">50%</td>
</tr>
</tbody>
</table>
<p>假如文字需要与图标配合使用，那么文字的颜色也是使用纯白色-<code>#FFFFFF</code>，但是会根据图片当前是否处于激活的状态而不同，</p>
<table>
<thead>
<tr>
<th style="text-align:center">图标激活状态</th>
<th style="text-align:center">图标对应文字的透明度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">激活</td>
<td style="text-align:center">100%</td>
</tr>
<tr>
<td style="text-align:center">未激活</td>
<td style="text-align:center">50%</td>
</tr>
</tbody>
</table>
<h2 id="字体的下载和使用"><a href="#字体的下载和使用" class="headerlink" title="字体的下载和使用"></a>字体的下载和使用</h2><p>前面提到的<code>Noto</code>字体和<code>Roboto</code>字体，可以分别在<br><a href="https://www.google.com/get/noto" target="_blank" rel="external">Noto的官网</a> 和<a href="https://fonts.google.com/" target="_blank" rel="external">Robot的官网</a>看到更为详细的介绍，并下载。</p>
<p>假如你的电脑上并没有安装这两种字体，请去官网下载。</p>
<p>下载以后(这里用安装Noto的简体中文字体来举例),</p>
<ol>
<li><p>将得到的压缩包解压；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/noto_font_unzip.png" width="200" alt=" noto_font_unzip"></div>
</li>
<li><p>依次双击字体文件<code>*.ttf</code>或<code>*.otf</code>；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/installed_noto_font.png" width="200" alt=" installed_noto_font"></div>

</li>
</ol>
<p>这样就可以将这些自己安装到电脑上了，在设计的过程中，就能够选择到对应的字体了。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/select_noto_font.png" width="300" alt=" select_noto_font"></div>

]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;文字的使用&quot;&gt;&lt;a href=&quot;#文字的使用&quot; class=&quot;headerlink&quot; title=&quot;文字的使用&quot;&gt;&lt;/a&gt;文字的使用&lt;/h1&gt;&lt;p&gt;文字是应用当中使用最多的要素。显示一段供用户阅读的文字，程序运行时的信息提示都离不开它。&lt;/p&gt;
&lt;p&gt;文字是内容的
    
    </summary>
    
      <category term="第2章-设计原理" scheme="http://book.anddle.com/categories/%E7%AC%AC2%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>3 颜色的运用</title>
    <link href="http://book.anddle.com/2_%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/3_%E9%A2%9C%E8%89%B2%E7%9A%84%E8%BF%90%E7%94%A8/"/>
    <id>http://book.anddle.com/2_设计原理/3_颜色的运用/</id>
    <published>2017-01-06T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="颜色的运用"><a href="#颜色的运用" class="headerlink" title="颜色的运用"></a>颜色的运用</h1><p><code>Material Design</code>采用的是扁平化的设计，可以看到一大块一大块区域的颜色。这些颜色大多亮丽引人，整个界面上搭配的颜色也不会太多，基本保持在三种颜色以内。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/pallete_classic_ui.png" width="300" alt=" pallete_classic_ui"></div>

<p>“没有错误的颜色的，只有错误的搭配”。颜色是没有对错的，我们要用经验和直觉来搭配它们，所以要先来认识认识颜色。</p>
<h2 id="颜色理论"><a href="#颜色理论" class="headerlink" title="颜色理论"></a>颜色理论</h2><p>颜色是有语言的，红色代表这热情奔放，蓝色代表的沉着安静，绿色代表着生机活力。搭配一组颜色，就是表达作品要传递的含义。</p>
<p>我们大部分人都知道RGB颜色，它的理论依据是：任何颜色都是通过不同强度的<code>红色R</code>、<code>绿色G</code>、<code>蓝色B</code>组合而成的，改变它们的组合就能得到任何颜色。在计算机领域，这三种颜色分别具有0～255个不同的数值。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/RGB_color.png" width="200" alt=" RGB_color"></div>

<p>对于设计师配色来讲，还会使用另外一个体系的颜色理论-HSB：色调H，饱和度S，亮度B。</p>
<p>我们人在谈论颜色的时候，总是说这个颜色很红、有点绿、偏蓝。</p>
<p>当我们说<code>很红</code>的时候，就是给颜色设定了一个基调-红色。这种基调称为色调。色调成圆环形状的分布，依次渐变的呈现出赤橙黄绿青蓝紫各种颜色。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/color_ring.jpg" width="300" alt=" color_ring"></div>

<p>色环具有360度，因此色调的数值就是0～359度。色调数值从0到359变化，也代表着颜色从<code>暖色</code>逐步过渡到<code>冷色</code>。你是不是看到红色就觉得温暖，而看到深蓝色就觉得冷飕飕的呢？</p>
<p><code>很红</code>的<code>很</code>字，就要通过饱和度和亮度来体现了，</p>
<ul>
<li><p>饱和度：可以理解成把一种纯粹的颜色溶解到水里面，如果水很多，颜色就很淡；如果水很少，颜色就很纯。因此它具有0%～100%的数值。</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/s_value_adjust.gif" width="400" alt=" s_value_adjust"></div>


</li>
</ul>
<ul>
<li>亮度：我们能看到物体是因为光线照在物体上面的缘故。如果一点光没有，不管什么样的颜色，看起来都是黑的，只有充足的光线才能反映出物体本来的颜色。因此它具有0%～100%的数值。<code>0%</code>说明没有光照，那么就会是黑色。</li>
</ul>
<p>如果你的本行并不是设计师或者刚入行不久，在给安卓应用配色的时候一定会犯迷糊，不知如何选择。幸好Google已经考虑到了这点。它从360度的色环当中，为大家选择出了非常适合做界面设计的色调，并通过调整这些色调的饱和度和亮度，得到了一系列可以与主色调搭配和谐的颜色（实际上，这些色调与主色调可能有细微的偏差，比如说3度）。这些颜色放在一起，被形象的叫做调色板。</p>
<p>例如，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/color_palette1.png" width="500" alt=" color_palette1"></div>

<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/color_palette2.png" width="500" alt=" color_palette2"></div>

<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/color_palette3.png" width="500" alt=" color_palette3"></div>

<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/color_palette4.png" width="500" alt=" color_palette4"></div>

<p>这些颜色都给出了对应的RGB数值，也给出了它们自己的名字，例如500，100，200，……，A700，数值越高，颜色越深。其中带<code>A</code>的，表示这个颜色推荐用来作为<code>Accent Color</code>（<code>Accent color</code>接下来会马上介绍到。）。</p>
<p>通过数字给颜色编号，这是为了方便设计师与开发者之间的沟通，给这些颜色取的名字。当他们谈论某个颜色的时候，只需要说出颜色的名字，大家脑中就会产生一个直观的印象。如果他们讲RGB值，大家都会觉得很难想象。</p>
<h2 id="选择颜色"><a href="#选择颜色" class="headerlink" title="选择颜色"></a>选择颜色</h2><p>通常来讲，一个应用界面当中，不要超过三种不同的色调，否则色调的差异就会过多的吸引使用者的注意，把关注点从内容上分散到各个不同的颜色上去了。</p>
<p>为了简化设计师的工作，Google的<code>Material Design</code>只需要选择<code>Primary Color</code> <code>Primary Dark Color</code> <code>Accent Color</code>三种颜色，就能确定整个应用的整体配色方案。</p>
<p>当设计师要给一个应用选择颜色的时候，</p>
<ol>
<li><p>可以会从色环当中选择一个设计师认为合适的颜色。</p>
</li>
<li><p>也可以从Google提供的调色板中选取。这些颜色都是Google千挑万选后的结果，如果大家没有特别的原因，就使用这种表现稳健的颜色吧。</p>
</li>
</ol>
<h3 id="Primary-Color"><a href="#Primary-Color" class="headerlink" title="Primary Color"></a>Primary Color</h3><p><code>Primary Color</code>是一个应用使用最为广泛的颜色，它决定了一个应用整体的基调。界面中很多的元素都会使用到这个颜色。</p>
<p>比如，主颜色选取Indigo 500。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/color_palette_choose1.png" width="300" alt=" color_palette_choose1"></div>

<h3 id="Primary-Dark-Color"><a href="#Primary-Dark-Color" class="headerlink" title="Primary Dark Color"></a>Primary Dark Color</h3><p>选定主颜色之后，通常还会在主颜色的附近，选择一个暗色作为搭配，例如Indigo 600～900作为深色。这个颜色通常只是体现在状态栏的颜色上。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/color_palette_choose2.png" width="300" alt=" color_palette_choose2"></div>

<p>除了暗色，有时还需要使用与主颜色相配合的亮色，例如Indigo 500作为主色之后，Indigo 50～400，都是亮色可选的对象。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/color_palette_choose3.png" width="300" alt=" color_palette_choose3"></div>

<h3 id="Accent-Color"><a href="#Accent-Color" class="headerlink" title="Accent Color"></a>Accent Color</h3><p><code>Accent Color</code>是与<code>Primary Color</code>完全不同的一个色调，用来吸引用户的注意力，比如用在按钮、进度条等等需要用户关注的、有交互功能的组件上面。如果<code>Primary Color</code>与<code>Accent Color</code>是不同色调，设计师可以自由的选择；如果<code>Primary Color</code>与<code>Accent Color</code>都是同一种色调，那么确定<code>Accent Color</code>的时候，通常使用Google调色板中名字里带<code>A</code>的颜色，例如<code>A100～A700</code>.</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/color_palette_choose4.png" width="300" alt=" color_palette_choose4"></div>

<h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><p>使用Google提供的调色板进行配色的时候，如果能够快速的查看配色完成后的效果就好了。</p>
<p><a href="https://www.materialpalette.com" target="_blank" rel="external"><code>Material Palette</code></a>为我们提供了这样的方便。当选中期望的<code>Primary Color</code>和<code>Accent Color</code>以后，右边的预览界面就会立刻看到搭配的效果。确认搭配方案之后，还可以下载配色的方案到本地，便于将调色板导入界面设计的软件当中直接使用。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_palette_tool.png" width="800" alt=" material_palette_too"></div>

]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;颜色的运用&quot;&gt;&lt;a href=&quot;#颜色的运用&quot; class=&quot;headerlink&quot; title=&quot;颜色的运用&quot;&gt;&lt;/a&gt;颜色的运用&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Material Design&lt;/code&gt;采用的是扁平化的设计，可以看到一大块一大块区域的颜色。这些颜
    
    </summary>
    
      <category term="第2章-设计原理" scheme="http://book.anddle.com/categories/%E7%AC%AC2%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>2 界面布局</title>
    <link href="http://book.anddle.com/2_%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/2_%E7%95%8C%E9%9D%A2%E5%B8%83%E5%B1%80/"/>
    <id>http://book.anddle.com/2_设计原理/2_界面布局/</id>
    <published>2017-01-05T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="界面布局"><a href="#界面布局" class="headerlink" title="界面布局"></a>界面布局</h1><p>布局涉及到应用界面的整体。布局的层次感和逻辑，可以通过阴影来体现。</p>
<p>举个例子。在一张纸当中，增加一条折痕，一个区域就分成了关联性很强的两个区域，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_paper_seams.png" width="600" alt=" material_paper_seams"></div>

<p>将一张纸盖在另一张纸之上，就像是搭台阶一样，上层会在下层投下阴影，这两张纸代表了逻辑不同的两个区域，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_paper_step.png" width="600" alt=" material_paper_step"></div>

<p>纸张在z轴的位置，被称作<code>Elevation</code>，很形象的比喻了纸片相对于别的照片被<code>提升</code>了起来。</p>
<h2 id="尺寸的度量"><a href="#尺寸的度量" class="headerlink" title="尺寸的度量"></a>尺寸的度量</h2><p>张纸片之间的距离产生阴影，那么距离用什么来衡量呢？要解答这个问题，我们首先要知道像素-px，物理尺寸-inch，像素密度-dpi和密度无关像素-dip这几个概念和它们之间的关系。</p>
<p>安卓系统提供了几种度量屏幕的单位：</p>
<ol>
<li><code>px</code>：以像素为单位进行设置，屏幕上每一个点，就是一个像素，例如一部安卓手机，屏幕像素是<code>1920 x 1080</code>，就是说屏幕高度有<code>1920</code>个像素点，宽度有<code>1080</code>个像素点，但是在安卓系统中，最好不要使用这个单位来设置尺寸，而是用<code>dp</code>；</li>
<li><code>sp</code>：用于字体大小的设置，它可以让字体大小根据用户在<code>设置</code>中的设置，进行缩放；</li>
<li><code>dp</code>：密度无关像素，这是在布局和控件中应该使用的单位；</li>
</ol>
<h3 id="dp的引入"><a href="#dp的引入" class="headerlink" title="dp的引入"></a>dp的引入</h3><p>如果用px为单位设定设备区域的大小，通常会有很大的问题。</p>
<p>假设有两个物理尺寸都为5寸大小的屏幕，它们的屏幕分辨率不同，一个是1080*1920，而另一个却是450*800.</p>
<p>如果指定一个按钮的大小为200px长，200px宽，那么它们的显示效果就如下图。很明显，两者的差别也太大了，界面就严重变形了。所以，想让一个区域的大小在不同屏幕的上显示的都差不多，就需要考虑像素密度。为了显示同样的长度，在密度大的屏幕上，使用到的像素就要多一些，在密度小的屏幕上，使用到的像素就要少一些。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/dp_explain1.png" width="400" alt=" dp_explain1"></div>

<p>所以为了解决这个问题，安卓引入了dip的概念－device independed pixel－简称dp。</p>
<h3 id="dpi的定义"><a href="#dpi的定义" class="headerlink" title="dpi的定义"></a>dpi的定义</h3><p>在近一步介绍<code>dp</code>之前，要先讲讲<code>dpi</code>。<code>dpi</code>叫做屏幕像素密度，就是每英寸有多少个像素点。我们用简单的数学原理-<code>勾股定理</code>就能算出刚才两个屏幕的dpi，一个是<code>440dpi</code>，另一个是<code>184dpi</code>。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/dp_explain2.png" width="500" alt=" dp_explain2"></div>

<p>注意，<code>dpi</code>与<code>dip(dp)</code>写法很像，千万不要混淆了，前者和<strong>密度</strong>有关，后者与<strong>像素</strong>有关。</p>
<h3 id="dpi的划分"><a href="#dpi的划分" class="headerlink" title="dpi的划分"></a>dpi的划分</h3><p>安卓使用<code>dpi</code>为160的数值作为一个基准－－<code>baseline</code>,</p>
<ol>
<li>如果一个设备的<code>dpi</code>刚好等于这个基准，那么它就是mdpi设备；</li>
<li>如果一个设备的<code>dpi</code>是这个基准的1.5倍，那么它就是hdpi设备；</li>
<li>如果一个设备的<code>dpi</code>是这个基准的2倍，那么它就是xhdpi设备；</li>
<li>如果一个设备的<code>dpi</code>是这个基准的3倍，那么它就是xxhdpi设备；</li>
</ol>
<p>这就是划分不同屏幕密度的依据。</p>
<table>
<thead>
<tr>
<th>像素密度类型</th>
<th>像素密度大小</th>
<th>与Baseline比值</th>
</tr>
</thead>
<tbody>
<tr>
<td>mdpi</td>
<td>160</td>
<td>1</td>
</tr>
<tr>
<td>hdpi</td>
<td>240</td>
<td>1.5</td>
</tr>
<tr>
<td>xhdpi</td>
<td>320</td>
<td>2</td>
</tr>
<tr>
<td>xxhpi</td>
<td>480</td>
<td>3</td>
</tr>
</tbody>
</table>
<p>按照这样的约定划分，</p>
<ol>
<li>刚才1080*1920的屏幕应该属于xxhdpi类型；</li>
<li>450*800的屏幕应该属于mdpi类型；</li>
</ol>
<p>现在的安卓手机几乎都在往高清屏幕发展，所以xhdpi和xxhdpi是最为常见的设备类型。</p>
<h3 id="dp与px的关系"><a href="#dp与px的关系" class="headerlink" title="dp与px的关系"></a>dp与px的关系</h3><p>安卓引入了<code>dp(dip)</code>的概念之后，实际显示的像素就可以通过下面这个公式计算出来 px = dp * dpi / 160。</p>
<p>相同<code>dp</code>的情况下，密度大的设备，实际像素就占的大，密度小点设备，实际像素就占用小了。因此使用dp这个单位后，按钮在两种不同的屏幕上的实际显示大小，几乎就是一样的了。</p>
<p>例如刚才两种屏幕。如果我指定按钮的大小为200dp*200dp，那么它们在各自的屏幕上占用的实际像素分别是230px*230px与550px*550px，真实设备上看上去的确差不多。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/dp_explain3.png" width="600" alt=" dp_explain3"></div>

<p>所以，我们以后在设计界面布局的时候，就可以在<code>标准大小（mdpi类型，尺寸为360dp*640dp）</code>的屏幕上，使用<code>dp</code>为单位进行设计就可以了。</p>
<hr>
<p>了解了安卓系统使用的尺寸衡量标准以后，我们就可以开始研究布局的逻辑区域划分了。</p>
<h2 id="布局的整体划分"><a href="#布局的整体划分" class="headerlink" title="布局的整体划分"></a>布局的整体划分</h2><p>安卓系统的界面大致可以分成三个部分：状态栏、内容区域、导航栏。</p>
<ul>
<li><p>状态栏显示电池电量、手机信号、通知等信息。</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/status_bar.png" width="300" alt=" status_bar"></div>
</li>
<li><p>导航栏显示返回、主界面、最近打开等三个虚拟按钮。</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/nav_bar.png" width="300" alt=" nav_bar"></div>

<p>  不过很多设备通过硬件按钮实现了这三个功能，所以就没有虚拟按键了。</p>
</li>
<li><p>内容区域就是给程序使用，显示程序自身内容的地方。它里面的内容也是像纸张一样，一层一层的堆放着的。</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_content_area.png" width="300" alt=" material_content_area"></div>

</li>
</ul>
<p>正如前面提到的那样，这三个区域也是像纸片一样，是层叠起来的，在z轴上存在空间关系。</p>
<h2 id="内容元素"><a href="#内容元素" class="headerlink" title="内容元素"></a>内容元素</h2><p>状态栏和导航栏的各个属性都是系统的，无法去进行z轴位置的控制，因此我们不必太过关注。各种不同的应用使用内容区域来显示各自的内容，这才是我们要讲的重点区域。</p>
<p>虽然这个区域的内容怎么显示都是由各个应用说了算，但是<code>Material Design</code>给出了推荐的设计。</p>
<p>在内容区域当中，可以通过折痕、阴影等方式将这些区域划分成不同的逻辑块。</p>
<p>下面是一个典型的<code>Material Design</code>布局（只是一个典型，并不是都这样，具体的布局方式还是要设计师来设计）。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_classic_layout.png" width="300" alt=" material_classic_layout"></div>

<h3 id="AppBar"><a href="#AppBar" class="headerlink" title="AppBar"></a>AppBar</h3><p>每个应用都有一个标题栏，叫做AppBar，它不仅可以显示这个应用的名称，也可以把更多的操作-<code>Action</code>放在上面，比如搜索，分享，更多等动作。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_classic_appbar.png" width="300" alt=" material_classic_appba"></div>

<p>它的位置处于z轴4dp处。</p>
<h3 id="Float-Button"><a href="#Float-Button" class="headerlink" title="Float Button"></a>Float Button</h3><p>悬浮按钮是<code>Material Design</code>中一个很重要的特色。它是一个圆形的按钮，悬浮于内容区域的最上面。当我们按下这个按钮的时候，它就会进一步的浮动到更靠上的位置。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_classic_float_button.png" width="100" alt=" material_classic_float_button"></div>

<p>当它没有被按下单时候，位于界面布局的z轴上6dp处，当它被按下单时候，z轴位置被调整到12dp处</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>除了上面的提及的几种内容元素意外，安卓系统还提供了很多别的元素，比如<code>Dialog</code> <code>Picker</code> <code>Menu</code> <code>Button</code>等等，它们在z轴上都有自己的位置，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_elevation.png" width="900" alt=" material_elevation"></div><br><div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_elevation_table.png" width="500" alt=" material_elevation_table"></div>

<p>至于每个元素在<code>Material Design</code>中长什么样，我们会在后面的章节介绍。</p>
<p>除了前面介绍的这种典型布局，还有很多其他的布局，我们也是放到后面专门的章节来介绍。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;界面布局&quot;&gt;&lt;a href=&quot;#界面布局&quot; class=&quot;headerlink&quot; title=&quot;界面布局&quot;&gt;&lt;/a&gt;界面布局&lt;/h1&gt;&lt;p&gt;布局涉及到应用界面的整体。布局的层次感和逻辑，可以通过阴影来体现。&lt;/p&gt;
&lt;p&gt;举个例子。在一张纸当中，增加一条折痕，一个
    
    </summary>
    
      <category term="第2章-设计原理" scheme="http://book.anddle.com/categories/%E7%AC%AC2%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>1 设计原理</title>
    <link href="http://book.anddle.com/2_%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/1_%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/"/>
    <id>http://book.anddle.com/2_设计原理/1_设计原理/</id>
    <published>2017-01-04T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计原理"><a href="#设计原理" class="headerlink" title="设计原理"></a>设计原理</h1><p>设计是一门让人感觉很抽象的艺术。设计需要从两个方面来考虑问题：</p>
<ul>
<li>实用：体现在功能上和交互性上；</li>
<li>美观：体现在界面的布局，色彩的搭配，字体的运用上；</li>
</ul>
<p>对于我们的安卓应用来讲，<code>设计</code>的目的就是要体现<code>需要显示给用户看的内容的</code>价值，将用户所有的注意力都吸引到要呈现的内容之上。</p>
<p>对安卓应用来讲，这些内容无非就是：文字和多媒体（视频、图片等等）。</p>
<p><em>在这里游戏就不是我们讨论的范畴了。</em></p>
<p>围绕内容，Google为此提出了一套针对于此的设计原则。</p>
<h2 id="Material-Design简介"><a href="#Material-Design简介" class="headerlink" title="Material Design简介"></a>Material Design简介</h2><p><code>Material Design</code>是Google专门为安卓应用开发而规定的一套<code>设计语言</code>。</p>
<p>在<code>Material Design</code>提出以前，安卓系统当中存在过两种不同的设计风格，每种风格都有<code>暗Dark</code> 和<code>亮Light</code>两种表现形式。例如，</p>
<ol>
<li><p>安卓系统最早问世的时候，界面风格是这样的，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/old_theme.png" width="600" alt=" old_theme"></div>
</li>
<li><p>后来在经历到安卓3.0点时候，设计了Holo主题，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/holo_theme.png" width="600" alt=" holo_theme"></div>

</li>
</ol>
<p>需要注意的是，当时这两种风格只能被称作安卓应用的主题，还没有上升到<code>设计语言</code>的高度。因此当时的应用，交互界面被设计的千奇百怪，拿着安卓手机，打开不同的应用（除了Google原生的应用），感觉很不协调。例如应用A的<code>新建</code>按钮放在左上角，而应用B的<code>新建</code>按钮又放在右下角，虽然可以这样设计，但是用户的使用体验不一致。</p>
<p>为了减少这种设计分裂的问题，Google从安卓5.0起，就提出了名叫<code>Material Design</code>的<code>设计语言</code>，倡导各位App的设计者，根据<code>Material Design</code>规范中的建议来开发应用，不要都去自创门派。</p>
<p>这套规范就规定了应用的，</p>
<ol>
<li>实用性-交互方式；</li>
<li>美观-布局、配色等等</li>
</ol>
<p>为了与<code>Material Design</code>配合，从安卓5.0开始，Google中安卓系统当中增加了<code>Material</code>主题。因此系统当中形成了原始主题、Holo主题、Material主题三者并存的状态。</p>
<p>从安卓5.0开始，Google强烈建议大家按照<code>Material Design</code>进行开发了。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/matiaral_theme.png" width="600" alt=" matiaral_theme"></div>

<p><em>当然这个规范也只是个建议，开发者实在不去使用，Google也没有办法</em></p>
<p>为了让<code>Material Design</code>的设计规范能容易的被程序开发者实现，Google在开发工具上也给出了相应的支持，从界面布局的设计到控件的使用，都提供了全套的支持。我们讲在后面程序开发的部分，对这些技术支持进行详细的介绍。</p>
<h2 id="Material-Design的理念"><a href="#Material-Design的理念" class="headerlink" title="Material Design的理念"></a>Material Design的理念</h2><p>在<code>Material Design</code>存在以前，我们已经经历过了<code>拟物设计</code>。最早的iOS系统就是<code>拟物设计</code>典型的代表。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/original_design.jpeg" width="400" alt=" original_design"></div>

<p>后来出现了<code>扁平化设计</code>，将以前立体的设计都拍扁，平摊在屏幕之上。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/flat_design.jpg" width="500" alt=" flat_design"></div>


<p>后来Google为了保持<code>扁平化设计</code>简洁，增加交互的立体感，提出了<code>Material Design</code>。</p>
<p><code>Material Design</code>是基于<code>印刷品</code>的理念来设计的。真实世界中，我们依靠阅读获取大量知识，Google将我们的屏幕想象成印刷着各种内容的载体。书是一页一页的，对应着屏幕上呈现内容的每一个区域，每个内容区域就是一种<code>材质</code>。它们就像一张张纸片，通过纸片摆放的位置、纸片间的运动，展示应用中不同的功能。</p>
<p>例如，通过两张<code>纸片</code>通过阴影的效果，反应了它们在3D空间中的位置关系，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_relations.gif" width="500" alt=" material_relations"></div>

<p>对位于不同层次的一张纸片来说，它的移动不会影响到另外层次的纸片。</p>
<p>因此可以想见，采用<code>Material Design</code>的应用，界面的层次感应该是呈堆叠状的，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_stack.png" width="400" alt=" material_stack"></div>

<p>因此我们说<code>MaterialDesign</code>将<code>扁平化</code>与<code>位置关系</code>结合了起来。</p>
<p>Google给<code>Material</code>-纸片定义了一些基本的特点：</p>
<ol>
<li><p>每一张纸片的厚度都是1个单位（就是1dp，dp的概念我们将在后面详细介绍）；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_thick_1dp.png" width="300" alt=" material_thick_1dp"></div>
</li>
<li><p>纸片之间都有z轴方向上的位置关系，有阴影效果；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_relations.gif" width="600" alt=" material_relations"></div>
</li>
<li><p>纸片上显示的内容是直接印在纸片上的，没有厚度，内容显示的区域限定在这张纸片之上；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_surface.gif" width="600" alt=" material_surface"></div>
</li>
<li><p>纸片上下层关系一旦确定就不能变化了，不允许纸片上下移动时的穿透；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_never_through.gif" width="600" alt=" material_never_through"></div>
</li>
<li><p>纸片的形状和大小是可以变化的；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_sizechange.gif" width="400" alt=" material_sizechange"></div>
</li>
<li><p>纸片不能被折叠</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_never_fold.gif" width="400" alt=" material_never_fold"></div>


</li>
</ol>
<h2 id="设计的秘诀"><a href="#设计的秘诀" class="headerlink" title="设计的秘诀"></a>设计的秘诀</h2><p>当设计师拿到框线图之后，就需要使用<code>Material Design</code>的设计语言来改造。所以，对于刚接触设计的我们来讲，要首先要学习的就是<code>Material Design</code>的种种套路。</p>
<p>不要被<code>Material Design</code>的概念吓唬到，将它分解成我们熟悉的内容，逐个掌握它的设计精髓。</p>
<h3 id="内容的展示"><a href="#内容的展示" class="headerlink" title="内容的展示"></a>内容的展示</h3><p><code>Material</code>-纸片，是用来展示具体内容的。</p>
<p>这涉及到了，</p>
<ul>
<li>字体的选择、字体大小的设置、文字内容的排列方式。</li>
<li>图片的大小区域、展示方式。</li>
</ul>
<h3 id="逻辑的体现"><a href="#逻辑的体现" class="headerlink" title="逻辑的体现"></a>逻辑的体现</h3><p>配色以及纸片的位置关系，是用来体现内容与交互之间逻辑关系的。</p>
<p>这涉及到了，</p>
<ul>
<li>给<code>material</code>纸片配色。</li>
<li>界面模块的布局方式。</li>
<li>系统图标的样式、放置规则。</li>
<li>动画效果的设定。</li>
<li>声音、震动等辅助效果的使用。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计原理&quot;&gt;&lt;a href=&quot;#设计原理&quot; class=&quot;headerlink&quot; title=&quot;设计原理&quot;&gt;&lt;/a&gt;设计原理&lt;/h1&gt;&lt;p&gt;设计是一门让人感觉很抽象的艺术。设计需要从两个方面来考虑问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实用：体现在功能上和交互性上；&lt;/
    
    </summary>
    
      <category term="第2章-设计原理" scheme="http://book.anddle.com/categories/%E7%AC%AC2%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>2 功能</title>
    <link href="http://book.anddle.com/1_%E5%88%9B%E6%84%8F/2_%E5%8A%9F%E8%83%BD/"/>
    <id>http://book.anddle.com/1_创意/2_功能/</id>
    <published>2017-01-03T01:00:00.000Z</published>
    <updated>2017-02-04T15:04:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="功能的确定"><a href="#功能的确定" class="headerlink" title="功能的确定"></a>功能的确定</h1><p>产品的功能并不是在确定了产品之后才开始考虑的，功能与创意选择其实是一个“你中有我，我中有你”的关系。为了体现产品设计的阶段性，我才将它单独提出来分析。</p>
<p>这里讨论的产品功能，是建立在选定了某个基础之上的。比如我们之前选定了<code>天气预报</code>，那么就将产品功能围绕<code>天气预报</code>讨论。</p>
<h2 id="头脑风暴"><a href="#头脑风暴" class="headerlink" title="头脑风暴"></a>头脑风暴</h2><p>一开始，我们可以对产品进行一次头脑风暴，找出它的核心功能和可以拓展的外延。</p>
<p>什么是头脑风暴？</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/brain_storm.jpg" width="300" alt=" brain_stor"></div>

<p>简单来说，就是给定一个主题，让一群身份不同的人漫无边际的想一些点子。之后将这些点子归类整理，进一步讨论它们的可行性和重要性，最后形成一个提案。</p>
<p>在我们这里，可以简单的理解成：为了挖掘产品的潜在的功能，我们先不管能不能实现，不管实现了有多大的意义，不管要付出多大的代价，是把我们能想到的功能都找出来。</p>
<p>进行头脑风暴的人最好由不同行业、不同背景的人组成，这样考虑的问题就能多角度，更全面。不过即使只有你一个人也行，毕竟你要做一个能让自己满意的产品才会感觉到快乐，对吧。</p>
<h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>可以将我们风暴的内容，写到小纸条上，贴在黑板上，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/brain_storm_function.png" width="300" alt=" brain_storm_function"></div>

<p>风暴结束后，将这些小纸条按照内容进行分类整理出来，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/brain_storm_function_arragement.png" width="300" alt=" brain_storm_function_arragement"></div>

<p>最后按照功能的重要性、相关性，形成我们的功能列表，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/brain_storm_function_list.png" width="250" alt=" brain_storm_function_list"></div>

<h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>在电脑上用思导图软件，将风暴的内容写在上面，例如使用Mac平台上的<a href="https://mindnode.com/" target="_blank" rel="external">MindNode</a>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/mindnode_logo.png" width="150" alt=" mindnode_logo"></div>

<p>然后通过拖动的方式将它们进行整理，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/mindnode_ui.png" width="500" alt=" mindnode_ui"></div>

<p>最后再形成功能列表。</p>
<p>除了头脑风暴，我还可以去软件市场下载同类型的产品，逐个研究它们具有哪些功能，对那些确实优秀的功能点加以优化，做出修改，进行微创新。</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>我们先来风暴一下<code>天气预报</code>要有些什么样的功能：</p>
<ol>
<li>能够连接网络，从网络获取数据，用来显示；</li>
<li>能够将获取的数据，例如当日的温度、湿度、风向、是否晴天下雨、紫外线指数、穿衣指数、污染指数等等，显示出来；</li>
<li>可以显示当日之后多天的预报，采用曲线图的方式呈现；</li>
<li>可以显示当日之前任何日期的实际天气情况；</li>
<li>能够设定当前的位置，获取天气情况；</li>
<li>能够配合当前的天气，显示一张合适的背景，比如下雨的时候，背景就是一张雨景的照片；</li>
<li>能够配合当前的天气，显示动态的背景，比如下雨的时候，背景就是雨水滑落的动态效果；</li>
<li>能够接收提醒，比如下雨了，发出一个通知提醒用户带雨伞；</li>
<li>能够提供一个桌面小工具，在桌面就能查看到天气信息；</li>
<li>天气数据到的源可以选择，阿里提供的、雅虎提供的、腾讯提供的、百度提供的，都可以切换；</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/wether_forcast_brain_storm.png" width="600" alt=" wether_forcast_brain_stor"></div>

<p>虽然我们还可以风暴出很多<code>天气预报</code>可以具有的功能，但是作为第一个例子，我们暂时就列出这么多吧。</p>
<p>接下来将功能分类，有的分类项也许有重叠，但是没有关系，</p>
<ul>
<li><p>外观类：</p>
<ol>
<li>配合天气显示的背景：动态图或者静态图；</li>
<li>显示温度、湿度、风向、天气、紫外线指数、穿衣指数、污染指数；</li>
<li>未来天气的预报，采用变化的曲线表示；</li>
<li>桌面小工具；</li>
</ol>
</li>
<li><p>功能点：</p>
<ol>
<li>通过网络获取天气数据；</li>
<li>多个天气数据源的选择；</li>
<li>多个地点的位置设定；</li>
<li>桌面小工具</li>
<li>提醒功能；</li>
<li>多天预报；</li>
<li>历史天气查询；</li>
</ol>
</li>
</ul>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/mindnode_brainstorm_function_arrangement.png" width="600" alt=" mindnode_brainstorm_function_arrangement"></div>

<h2 id="选定功能"><a href="#选定功能" class="headerlink" title="选定功能"></a>选定功能</h2><p>列出一堆的功能后，我们就要考虑给他们排列个重要程度了，确定哪些功能是必须的，哪些是可选的，他们实现起来复杂度有多大。</p>
<p>对于复杂度很高的功能，我们可能还要进行一次头脑风暴，理清楚它的重要性，看能不能把它分解成相对简单的功能来加入。如果不能，那么可能就得暂时放弃了。</p>
<p>有的功能可能还要依据现有的素材，看能不能提供，例如<code>紫外线指数</code>，如果网络端都没有这样的参数，那写在功能列表里面也是没有用的。由此我们也可以看出，<code>头脑风暴</code>之后，多种成员参与的重要性，如果有一位开发者，他可以很快的判断这个功能点从技术上讲实现起来是否可行。</p>
<h3 id="技术验证"><a href="#技术验证" class="headerlink" title="技术验证"></a>技术验证</h3><p>坦白的讲，技术验证并不是在功能确定之后才开始进行的。它应该在确定功能的时候给予技术上的配合，告诉方案的提出者：“这样的功能从技术上讲是可以（不可以）办到的”。</p>
<p>能越早回答这样的问题，就能越早发现并减少项目的风险。</p>
<p>在<code>天气预报</code>当中，最需要验证的并不是设计出一个界面设计出来后能不能做出来，而是去哪里获取天气数据。</p>
<p>天气数据才是功能的核心。从哪里获取数据呢？</p>
<p>我们没有自己的观测站，所以数据肯定是要从其他公开的渠道获取：通过网络蜘蛛爬取；通过第三方提供的标准API接口获取，例如阿里提供、雅虎提供、腾讯提供或者百度提供。</p>
<p>假如我能获取到第三方的数据，那么我是否需要自己建设一个提供天气信息的服务器呢？</p>
<p>就我个人来讲，我希望使用自己的服务器提供天气数据，把收集到的数据都整理到自己的服务器上，一旦某一处的数据出现问题，还可以自动切换到别处的，拥有更好的健壮性。</p>
<p>此外，我也可以自己定义天气数据的查询方式和回传内容，可操控性更好，不会担心数据源的格式发生改变，造成应用获取数据出错的问题。</p>
<p>因此我决定搭建一个服务器，为大家提供这样的数据获取方式，就不麻烦大家将精力分散到与安卓入门开发关系不大的领域去了。</p>
<p>不过，我这里提供的数据都是构造出来的，并不能真实的天气数据，目的只是为了帮助大家学习开发一款应用。毕竟去抓取网络数据有要花费额外的心思，偏离了我的本意。</p>
<p>至此，我们不需要为数据展现的内容而担心了，只要能想到的数据，我都可以在服务器端通过构造产生。之后的界面设计，就需要根据这些能获取到的信息来设计，</p>
<table>
<thead>
<tr>
<th>数据项</th>
<th>描述</th>
<th>取值</th>
</tr>
</thead>
<tbody>
<tr>
<td>实时温度</td>
<td>当前查询时的天气温度</td>
<td>整数数值</td>
</tr>
<tr>
<td>实时风力</td>
<td>当前查询时的风力大小</td>
<td>0-17级</td>
</tr>
<tr>
<td>实时风向</td>
<td>当前查询时的风向</td>
<td>东 西 南 北 东南 东北 西南 西北</td>
</tr>
<tr>
<td>实时天气</td>
<td>当前查询时的天气状况</td>
<td>晴天、雨天、多云、多云间晴、雾、雪</td>
</tr>
<tr>
<td>当日温度范围</td>
<td>当日温度范围</td>
<td>整数数值范围</td>
</tr>
<tr>
<td>实时空气质量</td>
<td>当前查询时的空气质量</td>
<td>优 良 轻度污染 重度污染 不利于生存</td>
</tr>
<tr>
<td>空气湿度</td>
<td>当前查询时的空气湿度</td>
<td>0-100%</td>
</tr>
<tr>
<td>运动指数</td>
<td>当前查询时的运动指数</td>
<td>非常适合 适合 不适合</td>
</tr>
<tr>
<td>紫外线指数</td>
<td>当前查询时的紫外线强度</td>
<td>强 中 弱</td>
</tr>
<tr>
<td>未来5天预报</td>
<td>未来5天天气状况、最高最低温度</td>
</tr>
</tbody>
</table>
<h3 id="功能筛选"><a href="#功能筛选" class="headerlink" title="功能筛选"></a>功能筛选</h3><p>下面，我们就来分析一下这些功能，并为它们的重要性和难易程度作出评价。评价的原则很简单：我们只是为了展现开发的各个关节，所以尽量把功能做的简单，降低我们第一次的学习门槛</p>
<ul>
<li>外观类：</li>
</ul>
<table>
<thead>
<tr>
<th>项目</th>
<th>分析</th>
<th style="text-align:center">难易程度</th>
<th style="text-align:center">重要性</th>
</tr>
</thead>
<tbody>
<tr>
<td>静态图背景</td>
<td>放一张静态图片即可</td>
<td style="text-align:center">易</td>
<td style="text-align:center">中</td>
</tr>
<tr>
<td>动态图背景</td>
<td>设置循环的动画效果</td>
<td style="text-align:center">难</td>
<td style="text-align:center">中</td>
</tr>
<tr>
<td>显示温度、湿度、风向等天气指数</td>
<td>具体显示哪些数据依赖于数据源</td>
<td style="text-align:center">易</td>
<td style="text-align:center">高</td>
</tr>
<tr>
<td>天气变化的曲线表示</td>
<td>这需要一个做曲线图的特殊组件</td>
<td style="text-align:center">难</td>
<td style="text-align:center">中</td>
</tr>
<tr>
<td>桌面小工具</td>
<td>安卓系统提供了桌面工具的框架机制</td>
<td style="text-align:center">中</td>
<td style="text-align:center">中</td>
</tr>
</tbody>
</table>
<ul>
<li>功能点：</li>
</ul>
<table>
<thead>
<tr>
<th>项目</th>
<th>分析</th>
<th style="text-align:center">难易程度</th>
<th style="text-align:center">重要性</th>
</tr>
</thead>
<tbody>
<tr>
<td>通过网络获取天气数据</td>
<td>这功能必须有，不然就没有显示的内容</td>
<td style="text-align:center">易</td>
<td style="text-align:center">高</td>
</tr>
<tr>
<td>多个天气数据源的选择</td>
<td>访问自己架设的服务器，不需要用户去选择</td>
<td style="text-align:center">易</td>
<td style="text-align:center">低</td>
</tr>
<tr>
<td>多个地点的位置设定</td>
<td>刚开始简化一点，只提供当地的天气预报，由服务器决定</td>
<td style="text-align:center">易</td>
<td style="text-align:center">低</td>
</tr>
<tr>
<td>桌面小工具</td>
<td>安卓系统提供了桌面工具的框架机制</td>
<td style="text-align:center">中</td>
<td style="text-align:center">中</td>
</tr>
<tr>
<td>提醒功能</td>
<td>需要网络端支持主动的推送数据</td>
<td style="text-align:center">难</td>
<td style="text-align:center">低</td>
</tr>
<tr>
<td>多天预报</td>
<td>天气类App的标配</td>
<td style="text-align:center">易</td>
<td style="text-align:center">高</td>
</tr>
<tr>
<td>历史天气查询</td>
<td>意义不大，用户更关心未来的天气</td>
<td style="text-align:center">中</td>
<td style="text-align:center">低</td>
</tr>
</tbody>
</table>
<p>我们把重要性低的、开发难的功能暂时放一放，于是得到了下面的功能清单：</p>
<ol>
<li>通过网络获取天气数据；</li>
<li>显示天气预报的位置；</li>
<li>显示当前时刻的：温度、温度变化范围、湿度、风向、风力、天气、紫外线指数、运动指数等信息；</li>
<li>未来5天天气预报，包括天气状况、温度变化范围；</li>
</ol>
<p>此外，为了近一步简化开发，我们还可以假定：所有的数据都是从网络获取，如果没有网络，那么就不能获取到天气信息。也就是说获取到数据不需要存储到手机上，这一点又降低了开发的难度。</p>
<h2 id="功能流程"><a href="#功能流程" class="headerlink" title="功能流程"></a>功能流程</h2><p>确定好功能后，就要根据这些功能，为应用设计一套使用的逻辑，比如需要几个界面，每个界面做些什么事情，这些界面都要覆盖到所有的功能点。</p>
<p><code>天气预报</code>的流程也许就是这样：</p>
<ol>
<li>App启动之后，自动去网络获取信息；</li>
<li>当日天气信息和近日的预报信息需要展示到界面上，但是具体怎么展示就要看设计阶段的设计方案了；</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_draft2.png" width="300" alt=" weather_app_draft2"></div>

<p>流程的设定和设计阶段有一定的交集。前者只是一个原则上的草图，而后者将会从设计的角度打磨出一款精品。</p>
<p>这时候的草图叫做框线图，就是一个手稿，一个示意图。这张图还要交给设计师，和设计师一起讨论设计的方案，再由设计师重新操刀，进行大刀阔斧的修改，将草图蜕变成真正的产品形态，最后形成高保真图、产品原型和UI素材。</p>
<h2 id="下一版功能"><a href="#下一版功能" class="headerlink" title="下一版功能"></a>下一版功能</h2><p>对于那些我们没有被选定进来的功能，我们可以将它们放到该App下个版本当中。例如，位置的设定，桌面小工具，天气预报的曲线图等等。</p>
<p>未来版本的天气预报App不仅需要修复之前存在的设计缺陷，也要加入新的功能，让用户获得更好的使用体验。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;功能的确定&quot;&gt;&lt;a href=&quot;#功能的确定&quot; class=&quot;headerlink&quot; title=&quot;功能的确定&quot;&gt;&lt;/a&gt;功能的确定&lt;/h1&gt;&lt;p&gt;产品的功能并不是在确定了产品之后才开始考虑的，功能与创意选择其实是一个“你中有我，我中有你”的关系。为了体现产品设计
    
    </summary>
    
      <category term="第1章-创意" scheme="http://book.anddle.com/categories/%E7%AC%AC1%E7%AB%A0-%E5%88%9B%E6%84%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>1 创意</title>
    <link href="http://book.anddle.com/1_%E5%88%9B%E6%84%8F/1_%E5%88%9B%E6%84%8F/"/>
    <id>http://book.anddle.com/1_创意/1_创意/</id>
    <published>2017-01-02T01:00:00.000Z</published>
    <updated>2017-02-04T15:04:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创意"><a href="#创意" class="headerlink" title="创意"></a>创意</h1><p>我们总会羡慕、崇拜那些创造出了伟大产品的人。提到乔布斯，大家一定会竖起大拇指，他创造出了革命性的ipod、macbook、iphone、ipad等等极具创意、使用方便、同时又设计优雅的产品。</p>
<p>对于从事软件行业的人来讲，最有成就感的事情莫过于开发出一款让人交口称赞的应用软件了。</p>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>好的产品要有好的创意，人对创造产品的创意来自于哪里呢？</p>
<p>我觉得产品的创意来源于三个方面：</p>
<ul>
<li><p>最直接的创意来源于自己的实际需要。比如，曾经有位程序员想写一部小说，他尝试了市面上很多文字编辑器，觉得都不能满足自己的需要，于是就自己开发了一款。最后，他原打算要写的书没有了下文，但是却创造出了Mac系统上非常经典的应用-<a href="https://ulyssesapp.com" target="_blank" rel="external"><code>Ulysses</code></a>，成为了很多作家的创作利器。<code>Ulysses</code>将写作爱好者的写作体验带入了天堂。</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/ulysses_logo.png" width="150" alt=" ulysses_logo"></div>
</li>
<li><p>更多的创意来源于对现有生活的归纳总结。用智能手机听音乐，几乎是每个使用者的刚性需求，所以开发一款音乐播放器的灵感就很容易跑进我们的大脑。</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/music_ui.jpeg" width="200" alt=" music_ui"></div>
</li>
<li><p>还有的创意来源于对现有产品的差异化。例如音乐播放器这样的刚需应用有很多，QQ音乐、阿里音乐，虾米音乐，酷狗音乐，安卓系统自带的音乐播放器等等。不过网易云音乐在众多的音乐播放器中脱引而出，依靠的正是它对其他类似应用差异化的挖掘–基于音乐的社交模式。</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/netease_music_logo.png" width="150" alt=" netease_music_logo"></div>

</li>
</ul>
<h2 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h2><p>好的创意是什么？我的理解是：</p>
<ul>
<li>实实在在的解决了一个问题，至少它能让我们觉得方便了我们的工作或者生活。</li>
<li>它的解决方法很简单，不需要复杂的操作，也许简单的让人意想不到。</li>
<li>产品的外观设计的深入人心，一看到它就有使用的欲望。</li>
</ul>
<h2 id="记录工具"><a href="#记录工具" class="headerlink" title="记录工具"></a>记录工具</h2><p>创意宝贵，可能我们一转眼就把它忘记了，所以我们要能随时将它们记录下来，</p>
<ul>
<li><p>最传统的方式就是笔和纸，好记性比不过烂笔头，随时带着一个小本子和笔，一旦有了产品的灵感，就把它记录下来。</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/note_and_pen.png" width="200" alt=" note_and_pen"></div>

<p>  iPad和apple pencil也是一对极好的搭档，用电子的方式做记录能便于我们做后继的整理。iPad上有很多好用的笔记类App，例如我正在使用的Notablitiy。</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/notability_logo.png" width="150" alt=" notability_logo"></div>
</li>
<li><p>手机是我们形影不离的帮手，你可以用手机中的记事本，记录下自己的想法。如果还觉得麻烦，可以通过录音，把它们保留下来。</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/note_and_recorder.png" width="200" alt=" note_and_recorde"></div>


</li>
</ul>
<p>有了创意，我们下一步就需要将它们整理起来，看看它们实现的可行性。</p>
<h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>创意怎么来，我是不能帮助大家的，这只能靠大家各自的能力、经验、体验和运气了。<br>我只能帮助大家如何从众多的创意中选择一个适合自己的。</p>
<p>并不是所有的创意都有让你去实现的价值。也许你有一个很好的创意，但是要花费很大的经济成本，那对你个人来说是有很大风险的，你不得不放弃。也许你有另外一个创意，但是也许别人已经在做了，只是你不知道而已，今后撞车的可能性很大。所以我们需要将它们筛选一遍，选择最适合的一个。</p>
<p>怎么选择呢？</p>
<p>我想选择的标准很多，主要还是看你的目的是什么，你为了实现这个创意，愿意付出多大的代价：</p>
<ul>
<li>为实现创意投入的资金是多少；</li>
<li>为实现创意投入的精力是多少；</li>
<li>实现创意的目的是为了自己的个人爱好，还是说为了靠它养家糊口；</li>
</ul>
<p>当我们面对众多诱惑需要进行选择的时候，你可以把要选择的对象横向铺开，像我们网上购物时比较商品一样，列出它们各自具备的优点和缺点，比较它们各自的异同，找出你最偏向的那个。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/goods_compare.png" width="500" alt=" goods_compare"></div>


<h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>这本书将把理论和实践结合在一起，所以我需要一个合适的创意做为我们后面讲解的例子。</p>
<p>首先明确我的目标。这个例子不能太复杂，门槛太高，会吓走很多人；但是也不能过于傻瓜，要涵盖一定的知识点，否则读完以后脑袋中还是空空如也。</p>
<p>计算器、视频播放器、记事本、音乐播放器、天气预报，都是一些经常可能用到的小应用。它们开发起来都不太困难，只是类型不同。</p>
<p>对于没有进行过安卓开发的你来说，也许根本就不知道是否困难，至少要亲自做一次之后才能知道。这里我就自己的经历来说，它们的实现还是很简单的，大家不必惊慌。</p>
<p>然后将这些项目在脑中进行横向对比后，给他们的各个项目点按照难易程度从1到5打分:</p>
<table>
<thead>
<tr>
<th style="text-align:center">项目</th>
<th style="text-align:center">计算器</th>
<th style="text-align:center">音乐播放器</th>
<th style="text-align:center">记事本</th>
<th style="text-align:center">视频播放器</th>
<th style="text-align:center">天气预报</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">体现安卓设计</td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
<td style="text-align:center">5</td>
<td style="text-align:center">2</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">技术简单</td>
<td style="text-align:center">5</td>
<td style="text-align:center">3</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">界面布局简单</td>
<td style="text-align:center">5</td>
<td style="text-align:center">2</td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">合计得分</td>
<td style="text-align:center">11</td>
<td style="text-align:center">8</td>
<td style="text-align:center">7</td>
<td style="text-align:center">7</td>
<td style="text-align:center">12</td>
</tr>
</tbody>
</table>
<p>上面所列出的项目和得分都是非常主观的，项目是根据开发者的目标来制定，而得分完全根据开发者个人的偏好和经验。所以要做到评估准确，最好的办法就是多做项目，增加自己的经验值。</p>
<p>通过上面的评比，我决定选择<code>天气预报</code>来做为本书讲解的范例。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创意&quot;&gt;&lt;a href=&quot;#创意&quot; class=&quot;headerlink&quot; title=&quot;创意&quot;&gt;&lt;/a&gt;创意&lt;/h1&gt;&lt;p&gt;我们总会羡慕、崇拜那些创造出了伟大产品的人。提到乔布斯，大家一定会竖起大拇指，他创造出了革命性的ipod、macbook、iphone、ip
    
    </summary>
    
      <category term="第1章-创意" scheme="http://book.anddle.com/categories/%E7%AC%AC1%E7%AB%A0-%E5%88%9B%E6%84%8F/"/>
    
    
  </entry>
  
</feed>
